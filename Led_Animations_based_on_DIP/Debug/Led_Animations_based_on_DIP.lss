
Led_Animations_based_on_DIP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  000026ca  0000273e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001f38  00000000  00000000  00002774  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d8b  00000000  00000000  000046ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005437  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005577  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000056e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007330  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000821b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009128  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000093b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009b83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 7d 12 	call	0x24fa	; 0x24fa <main>
      7a:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <Flasing_Voidevey_500ms>:
#include  "../../LIB/STD_TYPES.h"
#include "../../HAL/LED/LED_interface.h"
#define F_CPU    8000000UL
#include <util/delay.h>
void Flasing_Voidevey_500ms(LED_t * led)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	a0 97       	sbiw	r28, 0x20	; 32
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	98 a3       	std	Y+32, r25	; 0x20
     b4c:	8f 8f       	std	Y+31, r24	; 0x1f
	for(s8 i = 0 ; i < 8 ; i++)
     b4e:	1e 8e       	std	Y+30, r1	; 0x1e
     b50:	13 c0       	rjmp	.+38     	; 0xb78 <Flasing_Voidevey_500ms+0x42>
	{
		LED_voidOn(&led[i]);
     b52:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b54:	28 2f       	mov	r18, r24
     b56:	33 27       	eor	r19, r19
     b58:	27 fd       	sbrc	r18, 7
     b5a:	30 95       	com	r19
     b5c:	c9 01       	movw	r24, r18
     b5e:	88 0f       	add	r24, r24
     b60:	99 1f       	adc	r25, r25
     b62:	28 0f       	add	r18, r24
     b64:	39 1f       	adc	r19, r25
     b66:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b68:	98 a1       	ldd	r25, Y+32	; 0x20
     b6a:	82 0f       	add	r24, r18
     b6c:	93 1f       	adc	r25, r19
     b6e:	0e 94 15 12 	call	0x242a	; 0x242a <LED_voidOn>
#include "../../HAL/LED/LED_interface.h"
#define F_CPU    8000000UL
#include <util/delay.h>
void Flasing_Voidevey_500ms(LED_t * led)
{
	for(s8 i = 0 ; i < 8 ; i++)
     b72:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b74:	8f 5f       	subi	r24, 0xFF	; 255
     b76:	8e 8f       	std	Y+30, r24	; 0x1e
     b78:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b7a:	88 30       	cpi	r24, 0x08	; 8
     b7c:	54 f3       	brlt	.-44     	; 0xb52 <Flasing_Voidevey_500ms+0x1c>
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	aa ef       	ldi	r26, 0xFA	; 250
     b84:	b3 e4       	ldi	r27, 0x43	; 67
     b86:	89 8f       	std	Y+25, r24	; 0x19
     b88:	9a 8f       	std	Y+26, r25	; 0x1a
     b8a:	ab 8f       	std	Y+27, r26	; 0x1b
     b8c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b8e:	69 8d       	ldd	r22, Y+25	; 0x19
     b90:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b92:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b94:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	4a ef       	ldi	r20, 0xFA	; 250
     b9c:	54 e4       	ldi	r21, 0x44	; 68
     b9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ba2:	dc 01       	movw	r26, r24
     ba4:	cb 01       	movw	r24, r22
     ba6:	8d 8b       	std	Y+21, r24	; 0x15
     ba8:	9e 8b       	std	Y+22, r25	; 0x16
     baa:	af 8b       	std	Y+23, r26	; 0x17
     bac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     bae:	6d 89       	ldd	r22, Y+21	; 0x15
     bb0:	7e 89       	ldd	r23, Y+22	; 0x16
     bb2:	8f 89       	ldd	r24, Y+23	; 0x17
     bb4:	98 8d       	ldd	r25, Y+24	; 0x18
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	40 e8       	ldi	r20, 0x80	; 128
     bbc:	5f e3       	ldi	r21, 0x3F	; 63
     bbe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bc2:	88 23       	and	r24, r24
     bc4:	2c f4       	brge	.+10     	; 0xbd0 <Flasing_Voidevey_500ms+0x9a>
		__ticks = 1;
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	9c 8b       	std	Y+20, r25	; 0x14
     bcc:	8b 8b       	std	Y+19, r24	; 0x13
     bce:	3f c0       	rjmp	.+126    	; 0xc4e <Flasing_Voidevey_500ms+0x118>
	else if (__tmp > 65535)
     bd0:	6d 89       	ldd	r22, Y+21	; 0x15
     bd2:	7e 89       	ldd	r23, Y+22	; 0x16
     bd4:	8f 89       	ldd	r24, Y+23	; 0x17
     bd6:	98 8d       	ldd	r25, Y+24	; 0x18
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	3f ef       	ldi	r19, 0xFF	; 255
     bdc:	4f e7       	ldi	r20, 0x7F	; 127
     bde:	57 e4       	ldi	r21, 0x47	; 71
     be0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     be4:	18 16       	cp	r1, r24
     be6:	4c f5       	brge	.+82     	; 0xc3a <Flasing_Voidevey_500ms+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be8:	69 8d       	ldd	r22, Y+25	; 0x19
     bea:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bec:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bee:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	40 e2       	ldi	r20, 0x20	; 32
     bf6:	51 e4       	ldi	r21, 0x41	; 65
     bf8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	bc 01       	movw	r22, r24
     c02:	cd 01       	movw	r24, r26
     c04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c08:	dc 01       	movw	r26, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	9c 8b       	std	Y+20, r25	; 0x14
     c0e:	8b 8b       	std	Y+19, r24	; 0x13
     c10:	0f c0       	rjmp	.+30     	; 0xc30 <Flasing_Voidevey_500ms+0xfa>
     c12:	88 ec       	ldi	r24, 0xC8	; 200
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	9a 8b       	std	Y+18, r25	; 0x12
     c18:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1a:	89 89       	ldd	r24, Y+17	; 0x11
     c1c:	9a 89       	ldd	r25, Y+18	; 0x12
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	f1 f7       	brne	.-4      	; 0xc1e <Flasing_Voidevey_500ms+0xe8>
     c22:	9a 8b       	std	Y+18, r25	; 0x12
     c24:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c26:	8b 89       	ldd	r24, Y+19	; 0x13
     c28:	9c 89       	ldd	r25, Y+20	; 0x14
     c2a:	01 97       	sbiw	r24, 0x01	; 1
     c2c:	9c 8b       	std	Y+20, r25	; 0x14
     c2e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c30:	8b 89       	ldd	r24, Y+19	; 0x13
     c32:	9c 89       	ldd	r25, Y+20	; 0x14
     c34:	00 97       	sbiw	r24, 0x00	; 0
     c36:	69 f7       	brne	.-38     	; 0xc12 <Flasing_Voidevey_500ms+0xdc>
     c38:	14 c0       	rjmp	.+40     	; 0xc62 <Flasing_Voidevey_500ms+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3a:	6d 89       	ldd	r22, Y+21	; 0x15
     c3c:	7e 89       	ldd	r23, Y+22	; 0x16
     c3e:	8f 89       	ldd	r24, Y+23	; 0x17
     c40:	98 8d       	ldd	r25, Y+24	; 0x18
     c42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c46:	dc 01       	movw	r26, r24
     c48:	cb 01       	movw	r24, r22
     c4a:	9c 8b       	std	Y+20, r25	; 0x14
     c4c:	8b 8b       	std	Y+19, r24	; 0x13
     c4e:	8b 89       	ldd	r24, Y+19	; 0x13
     c50:	9c 89       	ldd	r25, Y+20	; 0x14
     c52:	98 8b       	std	Y+16, r25	; 0x10
     c54:	8f 87       	std	Y+15, r24	; 0x0f
     c56:	8f 85       	ldd	r24, Y+15	; 0x0f
     c58:	98 89       	ldd	r25, Y+16	; 0x10
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <Flasing_Voidevey_500ms+0x124>
     c5e:	98 8b       	std	Y+16, r25	; 0x10
     c60:	8f 87       	std	Y+15, r24	; 0x0f
	{
		LED_voidOn(&led[i]);

	}
	_delay_ms(500);
	for(s8 i = 0 ; i < 8 ; i++)
     c62:	1d 8e       	std	Y+29, r1	; 0x1d
     c64:	13 c0       	rjmp	.+38     	; 0xc8c <Flasing_Voidevey_500ms+0x156>
	{

	   LED_voidOff(&led[i]);
     c66:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c68:	28 2f       	mov	r18, r24
     c6a:	33 27       	eor	r19, r19
     c6c:	27 fd       	sbrc	r18, 7
     c6e:	30 95       	com	r19
     c70:	c9 01       	movw	r24, r18
     c72:	88 0f       	add	r24, r24
     c74:	99 1f       	adc	r25, r25
     c76:	28 0f       	add	r18, r24
     c78:	39 1f       	adc	r19, r25
     c7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c7c:	98 a1       	ldd	r25, Y+32	; 0x20
     c7e:	82 0f       	add	r24, r18
     c80:	93 1f       	adc	r25, r19
     c82:	0e 94 49 12 	call	0x2492	; 0x2492 <LED_voidOff>
	{
		LED_voidOn(&led[i]);

	}
	_delay_ms(500);
	for(s8 i = 0 ; i < 8 ; i++)
     c86:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c88:	8f 5f       	subi	r24, 0xFF	; 255
     c8a:	8d 8f       	std	Y+29, r24	; 0x1d
     c8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c8e:	88 30       	cpi	r24, 0x08	; 8
     c90:	54 f3       	brlt	.-44     	; 0xc66 <Flasing_Voidevey_500ms+0x130>
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	aa ef       	ldi	r26, 0xFA	; 250
     c98:	b3 e4       	ldi	r27, 0x43	; 67
     c9a:	8b 87       	std	Y+11, r24	; 0x0b
     c9c:	9c 87       	std	Y+12, r25	; 0x0c
     c9e:	ad 87       	std	Y+13, r26	; 0x0d
     ca0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ca2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ca4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ca6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ca8:	9e 85       	ldd	r25, Y+14	; 0x0e
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	4a ef       	ldi	r20, 0xFA	; 250
     cb0:	54 e4       	ldi	r21, 0x44	; 68
     cb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cb6:	dc 01       	movw	r26, r24
     cb8:	cb 01       	movw	r24, r22
     cba:	8f 83       	std	Y+7, r24	; 0x07
     cbc:	98 87       	std	Y+8, r25	; 0x08
     cbe:	a9 87       	std	Y+9, r26	; 0x09
     cc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cc2:	6f 81       	ldd	r22, Y+7	; 0x07
     cc4:	78 85       	ldd	r23, Y+8	; 0x08
     cc6:	89 85       	ldd	r24, Y+9	; 0x09
     cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	40 e8       	ldi	r20, 0x80	; 128
     cd0:	5f e3       	ldi	r21, 0x3F	; 63
     cd2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     cd6:	88 23       	and	r24, r24
     cd8:	2c f4       	brge	.+10     	; 0xce4 <Flasing_Voidevey_500ms+0x1ae>
		__ticks = 1;
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	9e 83       	std	Y+6, r25	; 0x06
     ce0:	8d 83       	std	Y+5, r24	; 0x05
     ce2:	3f c0       	rjmp	.+126    	; 0xd62 <Flasing_Voidevey_500ms+0x22c>
	else if (__tmp > 65535)
     ce4:	6f 81       	ldd	r22, Y+7	; 0x07
     ce6:	78 85       	ldd	r23, Y+8	; 0x08
     ce8:	89 85       	ldd	r24, Y+9	; 0x09
     cea:	9a 85       	ldd	r25, Y+10	; 0x0a
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	3f ef       	ldi	r19, 0xFF	; 255
     cf0:	4f e7       	ldi	r20, 0x7F	; 127
     cf2:	57 e4       	ldi	r21, 0x47	; 71
     cf4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     cf8:	18 16       	cp	r1, r24
     cfa:	4c f5       	brge	.+82     	; 0xd4e <Flasing_Voidevey_500ms+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cfc:	6b 85       	ldd	r22, Y+11	; 0x0b
     cfe:	7c 85       	ldd	r23, Y+12	; 0x0c
     d00:	8d 85       	ldd	r24, Y+13	; 0x0d
     d02:	9e 85       	ldd	r25, Y+14	; 0x0e
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e2       	ldi	r20, 0x20	; 32
     d0a:	51 e4       	ldi	r21, 0x41	; 65
     d0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d10:	dc 01       	movw	r26, r24
     d12:	cb 01       	movw	r24, r22
     d14:	bc 01       	movw	r22, r24
     d16:	cd 01       	movw	r24, r26
     d18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d1c:	dc 01       	movw	r26, r24
     d1e:	cb 01       	movw	r24, r22
     d20:	9e 83       	std	Y+6, r25	; 0x06
     d22:	8d 83       	std	Y+5, r24	; 0x05
     d24:	0f c0       	rjmp	.+30     	; 0xd44 <Flasing_Voidevey_500ms+0x20e>
     d26:	88 ec       	ldi	r24, 0xC8	; 200
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	9c 83       	std	Y+4, r25	; 0x04
     d2c:	8b 83       	std	Y+3, r24	; 0x03
     d2e:	8b 81       	ldd	r24, Y+3	; 0x03
     d30:	9c 81       	ldd	r25, Y+4	; 0x04
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	f1 f7       	brne	.-4      	; 0xd32 <Flasing_Voidevey_500ms+0x1fc>
     d36:	9c 83       	std	Y+4, r25	; 0x04
     d38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d3a:	8d 81       	ldd	r24, Y+5	; 0x05
     d3c:	9e 81       	ldd	r25, Y+6	; 0x06
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	9e 83       	std	Y+6, r25	; 0x06
     d42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d44:	8d 81       	ldd	r24, Y+5	; 0x05
     d46:	9e 81       	ldd	r25, Y+6	; 0x06
     d48:	00 97       	sbiw	r24, 0x00	; 0
     d4a:	69 f7       	brne	.-38     	; 0xd26 <Flasing_Voidevey_500ms+0x1f0>
     d4c:	14 c0       	rjmp	.+40     	; 0xd76 <Flasing_Voidevey_500ms+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d4e:	6f 81       	ldd	r22, Y+7	; 0x07
     d50:	78 85       	ldd	r23, Y+8	; 0x08
     d52:	89 85       	ldd	r24, Y+9	; 0x09
     d54:	9a 85       	ldd	r25, Y+10	; 0x0a
     d56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d5a:	dc 01       	movw	r26, r24
     d5c:	cb 01       	movw	r24, r22
     d5e:	9e 83       	std	Y+6, r25	; 0x06
     d60:	8d 83       	std	Y+5, r24	; 0x05
     d62:	8d 81       	ldd	r24, Y+5	; 0x05
     d64:	9e 81       	ldd	r25, Y+6	; 0x06
     d66:	9a 83       	std	Y+2, r25	; 0x02
     d68:	89 83       	std	Y+1, r24	; 0x01
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	9a 81       	ldd	r25, Y+2	; 0x02
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	f1 f7       	brne	.-4      	; 0xd6e <Flasing_Voidevey_500ms+0x238>
     d72:	9a 83       	std	Y+2, r25	; 0x02
     d74:	89 83       	std	Y+1, r24	; 0x01
	{

	   LED_voidOff(&led[i]);
	}
	_delay_ms(500);
}
     d76:	a0 96       	adiw	r28, 0x20	; 32
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	f8 94       	cli
     d7c:	de bf       	out	0x3e, r29	; 62
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	cd bf       	out	0x3d, r28	; 61
     d82:	cf 91       	pop	r28
     d84:	df 91       	pop	r29
     d86:	08 95       	ret

00000d88 <Shifting_VoidLeft_Every_250ms>:
/************************************************************************/
void Shifting_VoidLeft_Every_250ms(LED_t * led)
{
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	61 97       	sbiw	r28, 0x11	; 17
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	f8 94       	cli
     d96:	de bf       	out	0x3e, r29	; 62
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	cd bf       	out	0x3d, r28	; 61
     d9c:	99 8b       	std	Y+17, r25	; 0x11
     d9e:	88 8b       	std	Y+16, r24	; 0x10

	for(s8 i = 0 ; i < 8 ; i++)
     da0:	1f 86       	std	Y+15, r1	; 0x0f
     da2:	95 c0       	rjmp	.+298    	; 0xece <Shifting_VoidLeft_Every_250ms+0x146>
	{
		LED_voidOn(&led[i]);
     da4:	8f 85       	ldd	r24, Y+15	; 0x0f
     da6:	28 2f       	mov	r18, r24
     da8:	33 27       	eor	r19, r19
     daa:	27 fd       	sbrc	r18, 7
     dac:	30 95       	com	r19
     dae:	c9 01       	movw	r24, r18
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	28 0f       	add	r18, r24
     db6:	39 1f       	adc	r19, r25
     db8:	88 89       	ldd	r24, Y+16	; 0x10
     dba:	99 89       	ldd	r25, Y+17	; 0x11
     dbc:	82 0f       	add	r24, r18
     dbe:	93 1f       	adc	r25, r19
     dc0:	0e 94 15 12 	call	0x242a	; 0x242a <LED_voidOn>
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	aa e7       	ldi	r26, 0x7A	; 122
     dca:	b3 e4       	ldi	r27, 0x43	; 67
     dcc:	8b 87       	std	Y+11, r24	; 0x0b
     dce:	9c 87       	std	Y+12, r25	; 0x0c
     dd0:	ad 87       	std	Y+13, r26	; 0x0d
     dd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dd4:	6b 85       	ldd	r22, Y+11	; 0x0b
     dd6:	7c 85       	ldd	r23, Y+12	; 0x0c
     dd8:	8d 85       	ldd	r24, Y+13	; 0x0d
     dda:	9e 85       	ldd	r25, Y+14	; 0x0e
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	4a ef       	ldi	r20, 0xFA	; 250
     de2:	54 e4       	ldi	r21, 0x44	; 68
     de4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     de8:	dc 01       	movw	r26, r24
     dea:	cb 01       	movw	r24, r22
     dec:	8f 83       	std	Y+7, r24	; 0x07
     dee:	98 87       	std	Y+8, r25	; 0x08
     df0:	a9 87       	std	Y+9, r26	; 0x09
     df2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     df4:	6f 81       	ldd	r22, Y+7	; 0x07
     df6:	78 85       	ldd	r23, Y+8	; 0x08
     df8:	89 85       	ldd	r24, Y+9	; 0x09
     dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	40 e8       	ldi	r20, 0x80	; 128
     e02:	5f e3       	ldi	r21, 0x3F	; 63
     e04:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e08:	88 23       	and	r24, r24
     e0a:	2c f4       	brge	.+10     	; 0xe16 <Shifting_VoidLeft_Every_250ms+0x8e>
		__ticks = 1;
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	9e 83       	std	Y+6, r25	; 0x06
     e12:	8d 83       	std	Y+5, r24	; 0x05
     e14:	3f c0       	rjmp	.+126    	; 0xe94 <Shifting_VoidLeft_Every_250ms+0x10c>
	else if (__tmp > 65535)
     e16:	6f 81       	ldd	r22, Y+7	; 0x07
     e18:	78 85       	ldd	r23, Y+8	; 0x08
     e1a:	89 85       	ldd	r24, Y+9	; 0x09
     e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	3f ef       	ldi	r19, 0xFF	; 255
     e22:	4f e7       	ldi	r20, 0x7F	; 127
     e24:	57 e4       	ldi	r21, 0x47	; 71
     e26:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e2a:	18 16       	cp	r1, r24
     e2c:	4c f5       	brge	.+82     	; 0xe80 <Shifting_VoidLeft_Every_250ms+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e2e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e30:	7c 85       	ldd	r23, Y+12	; 0x0c
     e32:	8d 85       	ldd	r24, Y+13	; 0x0d
     e34:	9e 85       	ldd	r25, Y+14	; 0x0e
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	40 e2       	ldi	r20, 0x20	; 32
     e3c:	51 e4       	ldi	r21, 0x41	; 65
     e3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e42:	dc 01       	movw	r26, r24
     e44:	cb 01       	movw	r24, r22
     e46:	bc 01       	movw	r22, r24
     e48:	cd 01       	movw	r24, r26
     e4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e4e:	dc 01       	movw	r26, r24
     e50:	cb 01       	movw	r24, r22
     e52:	9e 83       	std	Y+6, r25	; 0x06
     e54:	8d 83       	std	Y+5, r24	; 0x05
     e56:	0f c0       	rjmp	.+30     	; 0xe76 <Shifting_VoidLeft_Every_250ms+0xee>
     e58:	88 ec       	ldi	r24, 0xC8	; 200
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	9c 83       	std	Y+4, r25	; 0x04
     e5e:	8b 83       	std	Y+3, r24	; 0x03
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	9c 81       	ldd	r25, Y+4	; 0x04
     e64:	01 97       	sbiw	r24, 0x01	; 1
     e66:	f1 f7       	brne	.-4      	; 0xe64 <Shifting_VoidLeft_Every_250ms+0xdc>
     e68:	9c 83       	std	Y+4, r25	; 0x04
     e6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e6c:	8d 81       	ldd	r24, Y+5	; 0x05
     e6e:	9e 81       	ldd	r25, Y+6	; 0x06
     e70:	01 97       	sbiw	r24, 0x01	; 1
     e72:	9e 83       	std	Y+6, r25	; 0x06
     e74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e76:	8d 81       	ldd	r24, Y+5	; 0x05
     e78:	9e 81       	ldd	r25, Y+6	; 0x06
     e7a:	00 97       	sbiw	r24, 0x00	; 0
     e7c:	69 f7       	brne	.-38     	; 0xe58 <Shifting_VoidLeft_Every_250ms+0xd0>
     e7e:	14 c0       	rjmp	.+40     	; 0xea8 <Shifting_VoidLeft_Every_250ms+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e80:	6f 81       	ldd	r22, Y+7	; 0x07
     e82:	78 85       	ldd	r23, Y+8	; 0x08
     e84:	89 85       	ldd	r24, Y+9	; 0x09
     e86:	9a 85       	ldd	r25, Y+10	; 0x0a
     e88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e8c:	dc 01       	movw	r26, r24
     e8e:	cb 01       	movw	r24, r22
     e90:	9e 83       	std	Y+6, r25	; 0x06
     e92:	8d 83       	std	Y+5, r24	; 0x05
     e94:	8d 81       	ldd	r24, Y+5	; 0x05
     e96:	9e 81       	ldd	r25, Y+6	; 0x06
     e98:	9a 83       	std	Y+2, r25	; 0x02
     e9a:	89 83       	std	Y+1, r24	; 0x01
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <Shifting_VoidLeft_Every_250ms+0x118>
     ea4:	9a 83       	std	Y+2, r25	; 0x02
     ea6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LED_voidOff(&led[i]);
     ea8:	8f 85       	ldd	r24, Y+15	; 0x0f
     eaa:	28 2f       	mov	r18, r24
     eac:	33 27       	eor	r19, r19
     eae:	27 fd       	sbrc	r18, 7
     eb0:	30 95       	com	r19
     eb2:	c9 01       	movw	r24, r18
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	28 0f       	add	r18, r24
     eba:	39 1f       	adc	r19, r25
     ebc:	88 89       	ldd	r24, Y+16	; 0x10
     ebe:	99 89       	ldd	r25, Y+17	; 0x11
     ec0:	82 0f       	add	r24, r18
     ec2:	93 1f       	adc	r25, r19
     ec4:	0e 94 49 12 	call	0x2492	; 0x2492 <LED_voidOff>
}
/************************************************************************/
void Shifting_VoidLeft_Every_250ms(LED_t * led)
{

	for(s8 i = 0 ; i < 8 ; i++)
     ec8:	8f 85       	ldd	r24, Y+15	; 0x0f
     eca:	8f 5f       	subi	r24, 0xFF	; 255
     ecc:	8f 87       	std	Y+15, r24	; 0x0f
     ece:	8f 85       	ldd	r24, Y+15	; 0x0f
     ed0:	88 30       	cpi	r24, 0x08	; 8
     ed2:	0c f4       	brge	.+2      	; 0xed6 <Shifting_VoidLeft_Every_250ms+0x14e>
     ed4:	67 cf       	rjmp	.-306    	; 0xda4 <Shifting_VoidLeft_Every_250ms+0x1c>
		LED_voidOn(&led[i]);
		_delay_ms(250);
		LED_voidOff(&led[i]);
	}

}
     ed6:	61 96       	adiw	r28, 0x11	; 17
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	f8 94       	cli
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	cd bf       	out	0x3d, r28	; 61
     ee2:	cf 91       	pop	r28
     ee4:	df 91       	pop	r29
     ee6:	08 95       	ret

00000ee8 <Shifting_VoidRight_Every_250ms>:
/*********************************************************************/
void Shifting_VoidRight_Every_250ms(LED_t * led)
{
     ee8:	df 93       	push	r29
     eea:	cf 93       	push	r28
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	61 97       	sbiw	r28, 0x11	; 17
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	99 8b       	std	Y+17, r25	; 0x11
     efe:	88 8b       	std	Y+16, r24	; 0x10

	for(s8 i = 7 ; i >= 0  ; i--)
     f00:	87 e0       	ldi	r24, 0x07	; 7
     f02:	8f 87       	std	Y+15, r24	; 0x0f
     f04:	95 c0       	rjmp	.+298    	; 0x1030 <Shifting_VoidRight_Every_250ms+0x148>
	{
		LED_voidOn(&led[i]);
     f06:	8f 85       	ldd	r24, Y+15	; 0x0f
     f08:	28 2f       	mov	r18, r24
     f0a:	33 27       	eor	r19, r19
     f0c:	27 fd       	sbrc	r18, 7
     f0e:	30 95       	com	r19
     f10:	c9 01       	movw	r24, r18
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	28 0f       	add	r18, r24
     f18:	39 1f       	adc	r19, r25
     f1a:	88 89       	ldd	r24, Y+16	; 0x10
     f1c:	99 89       	ldd	r25, Y+17	; 0x11
     f1e:	82 0f       	add	r24, r18
     f20:	93 1f       	adc	r25, r19
     f22:	0e 94 15 12 	call	0x242a	; 0x242a <LED_voidOn>
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	aa e7       	ldi	r26, 0x7A	; 122
     f2c:	b3 e4       	ldi	r27, 0x43	; 67
     f2e:	8b 87       	std	Y+11, r24	; 0x0b
     f30:	9c 87       	std	Y+12, r25	; 0x0c
     f32:	ad 87       	std	Y+13, r26	; 0x0d
     f34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f36:	6b 85       	ldd	r22, Y+11	; 0x0b
     f38:	7c 85       	ldd	r23, Y+12	; 0x0c
     f3a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f3c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	4a ef       	ldi	r20, 0xFA	; 250
     f44:	54 e4       	ldi	r21, 0x44	; 68
     f46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	8f 83       	std	Y+7, r24	; 0x07
     f50:	98 87       	std	Y+8, r25	; 0x08
     f52:	a9 87       	std	Y+9, r26	; 0x09
     f54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f56:	6f 81       	ldd	r22, Y+7	; 0x07
     f58:	78 85       	ldd	r23, Y+8	; 0x08
     f5a:	89 85       	ldd	r24, Y+9	; 0x09
     f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	40 e8       	ldi	r20, 0x80	; 128
     f64:	5f e3       	ldi	r21, 0x3F	; 63
     f66:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f6a:	88 23       	and	r24, r24
     f6c:	2c f4       	brge	.+10     	; 0xf78 <Shifting_VoidRight_Every_250ms+0x90>
		__ticks = 1;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	9e 83       	std	Y+6, r25	; 0x06
     f74:	8d 83       	std	Y+5, r24	; 0x05
     f76:	3f c0       	rjmp	.+126    	; 0xff6 <Shifting_VoidRight_Every_250ms+0x10e>
	else if (__tmp > 65535)
     f78:	6f 81       	ldd	r22, Y+7	; 0x07
     f7a:	78 85       	ldd	r23, Y+8	; 0x08
     f7c:	89 85       	ldd	r24, Y+9	; 0x09
     f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	3f ef       	ldi	r19, 0xFF	; 255
     f84:	4f e7       	ldi	r20, 0x7F	; 127
     f86:	57 e4       	ldi	r21, 0x47	; 71
     f88:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f8c:	18 16       	cp	r1, r24
     f8e:	4c f5       	brge	.+82     	; 0xfe2 <Shifting_VoidRight_Every_250ms+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f90:	6b 85       	ldd	r22, Y+11	; 0x0b
     f92:	7c 85       	ldd	r23, Y+12	; 0x0c
     f94:	8d 85       	ldd	r24, Y+13	; 0x0d
     f96:	9e 85       	ldd	r25, Y+14	; 0x0e
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	40 e2       	ldi	r20, 0x20	; 32
     f9e:	51 e4       	ldi	r21, 0x41	; 65
     fa0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	bc 01       	movw	r22, r24
     faa:	cd 01       	movw	r24, r26
     fac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	9e 83       	std	Y+6, r25	; 0x06
     fb6:	8d 83       	std	Y+5, r24	; 0x05
     fb8:	0f c0       	rjmp	.+30     	; 0xfd8 <Shifting_VoidRight_Every_250ms+0xf0>
     fba:	88 ec       	ldi	r24, 0xC8	; 200
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	9c 83       	std	Y+4, r25	; 0x04
     fc0:	8b 83       	std	Y+3, r24	; 0x03
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	9c 81       	ldd	r25, Y+4	; 0x04
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	f1 f7       	brne	.-4      	; 0xfc6 <Shifting_VoidRight_Every_250ms+0xde>
     fca:	9c 83       	std	Y+4, r25	; 0x04
     fcc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fce:	8d 81       	ldd	r24, Y+5	; 0x05
     fd0:	9e 81       	ldd	r25, Y+6	; 0x06
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	9e 83       	std	Y+6, r25	; 0x06
     fd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fd8:	8d 81       	ldd	r24, Y+5	; 0x05
     fda:	9e 81       	ldd	r25, Y+6	; 0x06
     fdc:	00 97       	sbiw	r24, 0x00	; 0
     fde:	69 f7       	brne	.-38     	; 0xfba <Shifting_VoidRight_Every_250ms+0xd2>
     fe0:	14 c0       	rjmp	.+40     	; 0x100a <Shifting_VoidRight_Every_250ms+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe2:	6f 81       	ldd	r22, Y+7	; 0x07
     fe4:	78 85       	ldd	r23, Y+8	; 0x08
     fe6:	89 85       	ldd	r24, Y+9	; 0x09
     fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	9e 83       	std	Y+6, r25	; 0x06
     ff4:	8d 83       	std	Y+5, r24	; 0x05
     ff6:	8d 81       	ldd	r24, Y+5	; 0x05
     ff8:	9e 81       	ldd	r25, Y+6	; 0x06
     ffa:	9a 83       	std	Y+2, r25	; 0x02
     ffc:	89 83       	std	Y+1, r24	; 0x01
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	f1 f7       	brne	.-4      	; 0x1002 <Shifting_VoidRight_Every_250ms+0x11a>
    1006:	9a 83       	std	Y+2, r25	; 0x02
    1008:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LED_voidOff(&led[i]);
    100a:	8f 85       	ldd	r24, Y+15	; 0x0f
    100c:	28 2f       	mov	r18, r24
    100e:	33 27       	eor	r19, r19
    1010:	27 fd       	sbrc	r18, 7
    1012:	30 95       	com	r19
    1014:	c9 01       	movw	r24, r18
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	28 0f       	add	r18, r24
    101c:	39 1f       	adc	r19, r25
    101e:	88 89       	ldd	r24, Y+16	; 0x10
    1020:	99 89       	ldd	r25, Y+17	; 0x11
    1022:	82 0f       	add	r24, r18
    1024:	93 1f       	adc	r25, r19
    1026:	0e 94 49 12 	call	0x2492	; 0x2492 <LED_voidOff>
}
/*********************************************************************/
void Shifting_VoidRight_Every_250ms(LED_t * led)
{

	for(s8 i = 7 ; i >= 0  ; i--)
    102a:	8f 85       	ldd	r24, Y+15	; 0x0f
    102c:	81 50       	subi	r24, 0x01	; 1
    102e:	8f 87       	std	Y+15, r24	; 0x0f
    1030:	8f 85       	ldd	r24, Y+15	; 0x0f
    1032:	88 23       	and	r24, r24
    1034:	0c f0       	brlt	.+2      	; 0x1038 <Shifting_VoidRight_Every_250ms+0x150>
    1036:	67 cf       	rjmp	.-306    	; 0xf06 <Shifting_VoidRight_Every_250ms+0x1e>
		LED_voidOn(&led[i]);
		_delay_ms(250);
		LED_voidOff(&led[i]);
	}

}
    1038:	61 96       	adiw	r28, 0x11	; 17
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <Leds_VoidConverging_Every_300ms>:

/***********************************************************************/
void Leds_VoidConverging_Every_300ms(LED_t * led)
{
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	62 97       	sbiw	r28, 0x12	; 18
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	9a 8b       	std	Y+18, r25	; 0x12
    1060:	89 8b       	std	Y+17, r24	; 0x11
	s8 j = 7;
    1062:	87 e0       	ldi	r24, 0x07	; 7
    1064:	88 8b       	std	Y+16, r24	; 0x10
	for(s8 i = 3 ; i >= 0 ; i--)
    1066:	83 e0       	ldi	r24, 0x03	; 3
    1068:	8f 87       	std	Y+15, r24	; 0x0f
    106a:	c7 c0       	rjmp	.+398    	; 0x11fa <Leds_VoidConverging_Every_300ms+0x1b0>
	{
		LED_voidOn(&led[i]);
    106c:	8f 85       	ldd	r24, Y+15	; 0x0f
    106e:	28 2f       	mov	r18, r24
    1070:	33 27       	eor	r19, r19
    1072:	27 fd       	sbrc	r18, 7
    1074:	30 95       	com	r19
    1076:	c9 01       	movw	r24, r18
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	28 0f       	add	r18, r24
    107e:	39 1f       	adc	r19, r25
    1080:	89 89       	ldd	r24, Y+17	; 0x11
    1082:	9a 89       	ldd	r25, Y+18	; 0x12
    1084:	82 0f       	add	r24, r18
    1086:	93 1f       	adc	r25, r19
    1088:	0e 94 15 12 	call	0x242a	; 0x242a <LED_voidOn>
		LED_voidOn(&led[j - i]);
    108c:	88 89       	ldd	r24, Y+16	; 0x10
    108e:	28 2f       	mov	r18, r24
    1090:	33 27       	eor	r19, r19
    1092:	27 fd       	sbrc	r18, 7
    1094:	30 95       	com	r19
    1096:	8f 85       	ldd	r24, Y+15	; 0x0f
    1098:	99 27       	eor	r25, r25
    109a:	87 fd       	sbrc	r24, 7
    109c:	90 95       	com	r25
    109e:	a9 01       	movw	r20, r18
    10a0:	48 1b       	sub	r20, r24
    10a2:	59 0b       	sbc	r21, r25
    10a4:	ca 01       	movw	r24, r20
    10a6:	9c 01       	movw	r18, r24
    10a8:	c9 01       	movw	r24, r18
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	28 0f       	add	r18, r24
    10b0:	39 1f       	adc	r19, r25
    10b2:	89 89       	ldd	r24, Y+17	; 0x11
    10b4:	9a 89       	ldd	r25, Y+18	; 0x12
    10b6:	82 0f       	add	r24, r18
    10b8:	93 1f       	adc	r25, r19
    10ba:	0e 94 15 12 	call	0x242a	; 0x242a <LED_voidOn>
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	a6 e9       	ldi	r26, 0x96	; 150
    10c4:	b3 e4       	ldi	r27, 0x43	; 67
    10c6:	8b 87       	std	Y+11, r24	; 0x0b
    10c8:	9c 87       	std	Y+12, r25	; 0x0c
    10ca:	ad 87       	std	Y+13, r26	; 0x0d
    10cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	4a ef       	ldi	r20, 0xFA	; 250
    10dc:	54 e4       	ldi	r21, 0x44	; 68
    10de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10e2:	dc 01       	movw	r26, r24
    10e4:	cb 01       	movw	r24, r22
    10e6:	8f 83       	std	Y+7, r24	; 0x07
    10e8:	98 87       	std	Y+8, r25	; 0x08
    10ea:	a9 87       	std	Y+9, r26	; 0x09
    10ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10ee:	6f 81       	ldd	r22, Y+7	; 0x07
    10f0:	78 85       	ldd	r23, Y+8	; 0x08
    10f2:	89 85       	ldd	r24, Y+9	; 0x09
    10f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	40 e8       	ldi	r20, 0x80	; 128
    10fc:	5f e3       	ldi	r21, 0x3F	; 63
    10fe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1102:	88 23       	and	r24, r24
    1104:	2c f4       	brge	.+10     	; 0x1110 <Leds_VoidConverging_Every_300ms+0xc6>
		__ticks = 1;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	9e 83       	std	Y+6, r25	; 0x06
    110c:	8d 83       	std	Y+5, r24	; 0x05
    110e:	3f c0       	rjmp	.+126    	; 0x118e <Leds_VoidConverging_Every_300ms+0x144>
	else if (__tmp > 65535)
    1110:	6f 81       	ldd	r22, Y+7	; 0x07
    1112:	78 85       	ldd	r23, Y+8	; 0x08
    1114:	89 85       	ldd	r24, Y+9	; 0x09
    1116:	9a 85       	ldd	r25, Y+10	; 0x0a
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	3f ef       	ldi	r19, 0xFF	; 255
    111c:	4f e7       	ldi	r20, 0x7F	; 127
    111e:	57 e4       	ldi	r21, 0x47	; 71
    1120:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1124:	18 16       	cp	r1, r24
    1126:	4c f5       	brge	.+82     	; 0x117a <Leds_VoidConverging_Every_300ms+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1128:	6b 85       	ldd	r22, Y+11	; 0x0b
    112a:	7c 85       	ldd	r23, Y+12	; 0x0c
    112c:	8d 85       	ldd	r24, Y+13	; 0x0d
    112e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	40 e2       	ldi	r20, 0x20	; 32
    1136:	51 e4       	ldi	r21, 0x41	; 65
    1138:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	bc 01       	movw	r22, r24
    1142:	cd 01       	movw	r24, r26
    1144:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	9e 83       	std	Y+6, r25	; 0x06
    114e:	8d 83       	std	Y+5, r24	; 0x05
    1150:	0f c0       	rjmp	.+30     	; 0x1170 <Leds_VoidConverging_Every_300ms+0x126>
    1152:	88 ec       	ldi	r24, 0xC8	; 200
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	9c 83       	std	Y+4, r25	; 0x04
    1158:	8b 83       	std	Y+3, r24	; 0x03
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	9c 81       	ldd	r25, Y+4	; 0x04
    115e:	01 97       	sbiw	r24, 0x01	; 1
    1160:	f1 f7       	brne	.-4      	; 0x115e <Leds_VoidConverging_Every_300ms+0x114>
    1162:	9c 83       	std	Y+4, r25	; 0x04
    1164:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	01 97       	sbiw	r24, 0x01	; 1
    116c:	9e 83       	std	Y+6, r25	; 0x06
    116e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1170:	8d 81       	ldd	r24, Y+5	; 0x05
    1172:	9e 81       	ldd	r25, Y+6	; 0x06
    1174:	00 97       	sbiw	r24, 0x00	; 0
    1176:	69 f7       	brne	.-38     	; 0x1152 <Leds_VoidConverging_Every_300ms+0x108>
    1178:	14 c0       	rjmp	.+40     	; 0x11a2 <Leds_VoidConverging_Every_300ms+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    117a:	6f 81       	ldd	r22, Y+7	; 0x07
    117c:	78 85       	ldd	r23, Y+8	; 0x08
    117e:	89 85       	ldd	r24, Y+9	; 0x09
    1180:	9a 85       	ldd	r25, Y+10	; 0x0a
    1182:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	9e 83       	std	Y+6, r25	; 0x06
    118c:	8d 83       	std	Y+5, r24	; 0x05
    118e:	8d 81       	ldd	r24, Y+5	; 0x05
    1190:	9e 81       	ldd	r25, Y+6	; 0x06
    1192:	9a 83       	std	Y+2, r25	; 0x02
    1194:	89 83       	std	Y+1, r24	; 0x01
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	9a 81       	ldd	r25, Y+2	; 0x02
    119a:	01 97       	sbiw	r24, 0x01	; 1
    119c:	f1 f7       	brne	.-4      	; 0x119a <Leds_VoidConverging_Every_300ms+0x150>
    119e:	9a 83       	std	Y+2, r25	; 0x02
    11a0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);
		LED_voidOff(&led[i]);
    11a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    11a4:	28 2f       	mov	r18, r24
    11a6:	33 27       	eor	r19, r19
    11a8:	27 fd       	sbrc	r18, 7
    11aa:	30 95       	com	r19
    11ac:	c9 01       	movw	r24, r18
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	28 0f       	add	r18, r24
    11b4:	39 1f       	adc	r19, r25
    11b6:	89 89       	ldd	r24, Y+17	; 0x11
    11b8:	9a 89       	ldd	r25, Y+18	; 0x12
    11ba:	82 0f       	add	r24, r18
    11bc:	93 1f       	adc	r25, r19
    11be:	0e 94 49 12 	call	0x2492	; 0x2492 <LED_voidOff>
		LED_voidOff(&led[j - i]);
    11c2:	88 89       	ldd	r24, Y+16	; 0x10
    11c4:	28 2f       	mov	r18, r24
    11c6:	33 27       	eor	r19, r19
    11c8:	27 fd       	sbrc	r18, 7
    11ca:	30 95       	com	r19
    11cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    11ce:	99 27       	eor	r25, r25
    11d0:	87 fd       	sbrc	r24, 7
    11d2:	90 95       	com	r25
    11d4:	a9 01       	movw	r20, r18
    11d6:	48 1b       	sub	r20, r24
    11d8:	59 0b       	sbc	r21, r25
    11da:	ca 01       	movw	r24, r20
    11dc:	9c 01       	movw	r18, r24
    11de:	c9 01       	movw	r24, r18
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	28 0f       	add	r18, r24
    11e6:	39 1f       	adc	r19, r25
    11e8:	89 89       	ldd	r24, Y+17	; 0x11
    11ea:	9a 89       	ldd	r25, Y+18	; 0x12
    11ec:	82 0f       	add	r24, r18
    11ee:	93 1f       	adc	r25, r19
    11f0:	0e 94 49 12 	call	0x2492	; 0x2492 <LED_voidOff>

/***********************************************************************/
void Leds_VoidConverging_Every_300ms(LED_t * led)
{
	s8 j = 7;
	for(s8 i = 3 ; i >= 0 ; i--)
    11f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    11f6:	81 50       	subi	r24, 0x01	; 1
    11f8:	8f 87       	std	Y+15, r24	; 0x0f
    11fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    11fc:	88 23       	and	r24, r24
    11fe:	0c f0       	brlt	.+2      	; 0x1202 <Leds_VoidConverging_Every_300ms+0x1b8>
    1200:	35 cf       	rjmp	.-406    	; 0x106c <Leds_VoidConverging_Every_300ms+0x22>
		_delay_ms(300);
		LED_voidOff(&led[i]);
		LED_voidOff(&led[j - i]);
	}

}
    1202:	62 96       	adiw	r28, 0x12	; 18
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <Leds_VoidDiverging_Every_300ms>:
/*********************************************************************/
void Leds_VoidDiverging_Every_300ms(LED_t * led)
{
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	62 97       	sbiw	r28, 0x12	; 18
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	9a 8b       	std	Y+18, r25	; 0x12
    122a:	89 8b       	std	Y+17, r24	; 0x11
	s8 j = 7;
    122c:	87 e0       	ldi	r24, 0x07	; 7
    122e:	88 8b       	std	Y+16, r24	; 0x10
	for(s8 i = 0 ; i < 4 ; i++)
    1230:	1f 86       	std	Y+15, r1	; 0x0f
    1232:	c7 c0       	rjmp	.+398    	; 0x13c2 <Leds_VoidDiverging_Every_300ms+0x1ae>
	{
		LED_voidOn(&led[i]);
    1234:	8f 85       	ldd	r24, Y+15	; 0x0f
    1236:	28 2f       	mov	r18, r24
    1238:	33 27       	eor	r19, r19
    123a:	27 fd       	sbrc	r18, 7
    123c:	30 95       	com	r19
    123e:	c9 01       	movw	r24, r18
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	28 0f       	add	r18, r24
    1246:	39 1f       	adc	r19, r25
    1248:	89 89       	ldd	r24, Y+17	; 0x11
    124a:	9a 89       	ldd	r25, Y+18	; 0x12
    124c:	82 0f       	add	r24, r18
    124e:	93 1f       	adc	r25, r19
    1250:	0e 94 15 12 	call	0x242a	; 0x242a <LED_voidOn>
		LED_voidOn(&led[j - i]);
    1254:	88 89       	ldd	r24, Y+16	; 0x10
    1256:	28 2f       	mov	r18, r24
    1258:	33 27       	eor	r19, r19
    125a:	27 fd       	sbrc	r18, 7
    125c:	30 95       	com	r19
    125e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1260:	99 27       	eor	r25, r25
    1262:	87 fd       	sbrc	r24, 7
    1264:	90 95       	com	r25
    1266:	a9 01       	movw	r20, r18
    1268:	48 1b       	sub	r20, r24
    126a:	59 0b       	sbc	r21, r25
    126c:	ca 01       	movw	r24, r20
    126e:	9c 01       	movw	r18, r24
    1270:	c9 01       	movw	r24, r18
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	28 0f       	add	r18, r24
    1278:	39 1f       	adc	r19, r25
    127a:	89 89       	ldd	r24, Y+17	; 0x11
    127c:	9a 89       	ldd	r25, Y+18	; 0x12
    127e:	82 0f       	add	r24, r18
    1280:	93 1f       	adc	r25, r19
    1282:	0e 94 15 12 	call	0x242a	; 0x242a <LED_voidOn>
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	a6 e9       	ldi	r26, 0x96	; 150
    128c:	b3 e4       	ldi	r27, 0x43	; 67
    128e:	8b 87       	std	Y+11, r24	; 0x0b
    1290:	9c 87       	std	Y+12, r25	; 0x0c
    1292:	ad 87       	std	Y+13, r26	; 0x0d
    1294:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1296:	6b 85       	ldd	r22, Y+11	; 0x0b
    1298:	7c 85       	ldd	r23, Y+12	; 0x0c
    129a:	8d 85       	ldd	r24, Y+13	; 0x0d
    129c:	9e 85       	ldd	r25, Y+14	; 0x0e
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	4a ef       	ldi	r20, 0xFA	; 250
    12a4:	54 e4       	ldi	r21, 0x44	; 68
    12a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	8f 83       	std	Y+7, r24	; 0x07
    12b0:	98 87       	std	Y+8, r25	; 0x08
    12b2:	a9 87       	std	Y+9, r26	; 0x09
    12b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12b6:	6f 81       	ldd	r22, Y+7	; 0x07
    12b8:	78 85       	ldd	r23, Y+8	; 0x08
    12ba:	89 85       	ldd	r24, Y+9	; 0x09
    12bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	40 e8       	ldi	r20, 0x80	; 128
    12c4:	5f e3       	ldi	r21, 0x3F	; 63
    12c6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12ca:	88 23       	and	r24, r24
    12cc:	2c f4       	brge	.+10     	; 0x12d8 <Leds_VoidDiverging_Every_300ms+0xc4>
		__ticks = 1;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	9e 83       	std	Y+6, r25	; 0x06
    12d4:	8d 83       	std	Y+5, r24	; 0x05
    12d6:	3f c0       	rjmp	.+126    	; 0x1356 <Leds_VoidDiverging_Every_300ms+0x142>
	else if (__tmp > 65535)
    12d8:	6f 81       	ldd	r22, Y+7	; 0x07
    12da:	78 85       	ldd	r23, Y+8	; 0x08
    12dc:	89 85       	ldd	r24, Y+9	; 0x09
    12de:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	3f ef       	ldi	r19, 0xFF	; 255
    12e4:	4f e7       	ldi	r20, 0x7F	; 127
    12e6:	57 e4       	ldi	r21, 0x47	; 71
    12e8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12ec:	18 16       	cp	r1, r24
    12ee:	4c f5       	brge	.+82     	; 0x1342 <Leds_VoidDiverging_Every_300ms+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    12f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    12f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e2       	ldi	r20, 0x20	; 32
    12fe:	51 e4       	ldi	r21, 0x41	; 65
    1300:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	bc 01       	movw	r22, r24
    130a:	cd 01       	movw	r24, r26
    130c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	9e 83       	std	Y+6, r25	; 0x06
    1316:	8d 83       	std	Y+5, r24	; 0x05
    1318:	0f c0       	rjmp	.+30     	; 0x1338 <Leds_VoidDiverging_Every_300ms+0x124>
    131a:	88 ec       	ldi	r24, 0xC8	; 200
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	9c 83       	std	Y+4, r25	; 0x04
    1320:	8b 83       	std	Y+3, r24	; 0x03
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	9c 81       	ldd	r25, Y+4	; 0x04
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	f1 f7       	brne	.-4      	; 0x1326 <Leds_VoidDiverging_Every_300ms+0x112>
    132a:	9c 83       	std	Y+4, r25	; 0x04
    132c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132e:	8d 81       	ldd	r24, Y+5	; 0x05
    1330:	9e 81       	ldd	r25, Y+6	; 0x06
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	9e 83       	std	Y+6, r25	; 0x06
    1336:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1338:	8d 81       	ldd	r24, Y+5	; 0x05
    133a:	9e 81       	ldd	r25, Y+6	; 0x06
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	69 f7       	brne	.-38     	; 0x131a <Leds_VoidDiverging_Every_300ms+0x106>
    1340:	14 c0       	rjmp	.+40     	; 0x136a <Leds_VoidDiverging_Every_300ms+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1342:	6f 81       	ldd	r22, Y+7	; 0x07
    1344:	78 85       	ldd	r23, Y+8	; 0x08
    1346:	89 85       	ldd	r24, Y+9	; 0x09
    1348:	9a 85       	ldd	r25, Y+10	; 0x0a
    134a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	9e 83       	std	Y+6, r25	; 0x06
    1354:	8d 83       	std	Y+5, r24	; 0x05
    1356:	8d 81       	ldd	r24, Y+5	; 0x05
    1358:	9e 81       	ldd	r25, Y+6	; 0x06
    135a:	9a 83       	std	Y+2, r25	; 0x02
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	9a 81       	ldd	r25, Y+2	; 0x02
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	f1 f7       	brne	.-4      	; 0x1362 <Leds_VoidDiverging_Every_300ms+0x14e>
    1366:	9a 83       	std	Y+2, r25	; 0x02
    1368:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);
		LED_voidOff(&led[i]);
    136a:	8f 85       	ldd	r24, Y+15	; 0x0f
    136c:	28 2f       	mov	r18, r24
    136e:	33 27       	eor	r19, r19
    1370:	27 fd       	sbrc	r18, 7
    1372:	30 95       	com	r19
    1374:	c9 01       	movw	r24, r18
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	28 0f       	add	r18, r24
    137c:	39 1f       	adc	r19, r25
    137e:	89 89       	ldd	r24, Y+17	; 0x11
    1380:	9a 89       	ldd	r25, Y+18	; 0x12
    1382:	82 0f       	add	r24, r18
    1384:	93 1f       	adc	r25, r19
    1386:	0e 94 49 12 	call	0x2492	; 0x2492 <LED_voidOff>
		LED_voidOff(&led[j - i]);
    138a:	88 89       	ldd	r24, Y+16	; 0x10
    138c:	28 2f       	mov	r18, r24
    138e:	33 27       	eor	r19, r19
    1390:	27 fd       	sbrc	r18, 7
    1392:	30 95       	com	r19
    1394:	8f 85       	ldd	r24, Y+15	; 0x0f
    1396:	99 27       	eor	r25, r25
    1398:	87 fd       	sbrc	r24, 7
    139a:	90 95       	com	r25
    139c:	a9 01       	movw	r20, r18
    139e:	48 1b       	sub	r20, r24
    13a0:	59 0b       	sbc	r21, r25
    13a2:	ca 01       	movw	r24, r20
    13a4:	9c 01       	movw	r18, r24
    13a6:	c9 01       	movw	r24, r18
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	28 0f       	add	r18, r24
    13ae:	39 1f       	adc	r19, r25
    13b0:	89 89       	ldd	r24, Y+17	; 0x11
    13b2:	9a 89       	ldd	r25, Y+18	; 0x12
    13b4:	82 0f       	add	r24, r18
    13b6:	93 1f       	adc	r25, r19
    13b8:	0e 94 49 12 	call	0x2492	; 0x2492 <LED_voidOff>
}
/*********************************************************************/
void Leds_VoidDiverging_Every_300ms(LED_t * led)
{
	s8 j = 7;
	for(s8 i = 0 ; i < 4 ; i++)
    13bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    13be:	8f 5f       	subi	r24, 0xFF	; 255
    13c0:	8f 87       	std	Y+15, r24	; 0x0f
    13c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13c4:	84 30       	cpi	r24, 0x04	; 4
    13c6:	0c f4       	brge	.+2      	; 0x13ca <Leds_VoidDiverging_Every_300ms+0x1b6>
    13c8:	35 cf       	rjmp	.-406    	; 0x1234 <Leds_VoidDiverging_Every_300ms+0x20>
		_delay_ms(300);
		LED_voidOff(&led[i]);
		LED_voidOff(&led[j - i]);
	}

}
    13ca:	62 96       	adiw	r28, 0x12	; 18
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	f8 94       	cli
    13d0:	de bf       	out	0x3e, r29	; 62
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	cd bf       	out	0x3d, r28	; 61
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	08 95       	ret

000013dc <Leds_VoidPingPong_Every_250ms>:
/************************************************************************/
void Leds_VoidPingPong_Every_250ms(LED_t * led)
{
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	a0 97       	sbiw	r28, 0x20	; 32
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	f8 94       	cli
    13ea:	de bf       	out	0x3e, r29	; 62
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	cd bf       	out	0x3d, r28	; 61
    13f0:	98 a3       	std	Y+32, r25	; 0x20
    13f2:	8f 8f       	std	Y+31, r24	; 0x1f
	for(s8 i = 0 ; i < 8 ; i++)
    13f4:	1e 8e       	std	Y+30, r1	; 0x1e
    13f6:	95 c0       	rjmp	.+298    	; 0x1522 <Leds_VoidPingPong_Every_250ms+0x146>
	{
		LED_voidOn(&led[i]);
    13f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13fa:	28 2f       	mov	r18, r24
    13fc:	33 27       	eor	r19, r19
    13fe:	27 fd       	sbrc	r18, 7
    1400:	30 95       	com	r19
    1402:	c9 01       	movw	r24, r18
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	28 0f       	add	r18, r24
    140a:	39 1f       	adc	r19, r25
    140c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    140e:	98 a1       	ldd	r25, Y+32	; 0x20
    1410:	82 0f       	add	r24, r18
    1412:	93 1f       	adc	r25, r19
    1414:	0e 94 15 12 	call	0x242a	; 0x242a <LED_voidOn>
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	aa e7       	ldi	r26, 0x7A	; 122
    141e:	b3 e4       	ldi	r27, 0x43	; 67
    1420:	89 8f       	std	Y+25, r24	; 0x19
    1422:	9a 8f       	std	Y+26, r25	; 0x1a
    1424:	ab 8f       	std	Y+27, r26	; 0x1b
    1426:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1428:	69 8d       	ldd	r22, Y+25	; 0x19
    142a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    142c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    142e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	4a ef       	ldi	r20, 0xFA	; 250
    1436:	54 e4       	ldi	r21, 0x44	; 68
    1438:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	8d 8b       	std	Y+21, r24	; 0x15
    1442:	9e 8b       	std	Y+22, r25	; 0x16
    1444:	af 8b       	std	Y+23, r26	; 0x17
    1446:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1448:	6d 89       	ldd	r22, Y+21	; 0x15
    144a:	7e 89       	ldd	r23, Y+22	; 0x16
    144c:	8f 89       	ldd	r24, Y+23	; 0x17
    144e:	98 8d       	ldd	r25, Y+24	; 0x18
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	40 e8       	ldi	r20, 0x80	; 128
    1456:	5f e3       	ldi	r21, 0x3F	; 63
    1458:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    145c:	88 23       	and	r24, r24
    145e:	2c f4       	brge	.+10     	; 0x146a <Leds_VoidPingPong_Every_250ms+0x8e>
		__ticks = 1;
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	9c 8b       	std	Y+20, r25	; 0x14
    1466:	8b 8b       	std	Y+19, r24	; 0x13
    1468:	3f c0       	rjmp	.+126    	; 0x14e8 <Leds_VoidPingPong_Every_250ms+0x10c>
	else if (__tmp > 65535)
    146a:	6d 89       	ldd	r22, Y+21	; 0x15
    146c:	7e 89       	ldd	r23, Y+22	; 0x16
    146e:	8f 89       	ldd	r24, Y+23	; 0x17
    1470:	98 8d       	ldd	r25, Y+24	; 0x18
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	3f ef       	ldi	r19, 0xFF	; 255
    1476:	4f e7       	ldi	r20, 0x7F	; 127
    1478:	57 e4       	ldi	r21, 0x47	; 71
    147a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    147e:	18 16       	cp	r1, r24
    1480:	4c f5       	brge	.+82     	; 0x14d4 <Leds_VoidPingPong_Every_250ms+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1482:	69 8d       	ldd	r22, Y+25	; 0x19
    1484:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1486:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1488:	9c 8d       	ldd	r25, Y+28	; 0x1c
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	40 e2       	ldi	r20, 0x20	; 32
    1490:	51 e4       	ldi	r21, 0x41	; 65
    1492:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	bc 01       	movw	r22, r24
    149c:	cd 01       	movw	r24, r26
    149e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	9c 8b       	std	Y+20, r25	; 0x14
    14a8:	8b 8b       	std	Y+19, r24	; 0x13
    14aa:	0f c0       	rjmp	.+30     	; 0x14ca <Leds_VoidPingPong_Every_250ms+0xee>
    14ac:	88 ec       	ldi	r24, 0xC8	; 200
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	9a 8b       	std	Y+18, r25	; 0x12
    14b2:	89 8b       	std	Y+17, r24	; 0x11
    14b4:	89 89       	ldd	r24, Y+17	; 0x11
    14b6:	9a 89       	ldd	r25, Y+18	; 0x12
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	f1 f7       	brne	.-4      	; 0x14b8 <Leds_VoidPingPong_Every_250ms+0xdc>
    14bc:	9a 8b       	std	Y+18, r25	; 0x12
    14be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c0:	8b 89       	ldd	r24, Y+19	; 0x13
    14c2:	9c 89       	ldd	r25, Y+20	; 0x14
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	9c 8b       	std	Y+20, r25	; 0x14
    14c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ca:	8b 89       	ldd	r24, Y+19	; 0x13
    14cc:	9c 89       	ldd	r25, Y+20	; 0x14
    14ce:	00 97       	sbiw	r24, 0x00	; 0
    14d0:	69 f7       	brne	.-38     	; 0x14ac <Leds_VoidPingPong_Every_250ms+0xd0>
    14d2:	14 c0       	rjmp	.+40     	; 0x14fc <Leds_VoidPingPong_Every_250ms+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d4:	6d 89       	ldd	r22, Y+21	; 0x15
    14d6:	7e 89       	ldd	r23, Y+22	; 0x16
    14d8:	8f 89       	ldd	r24, Y+23	; 0x17
    14da:	98 8d       	ldd	r25, Y+24	; 0x18
    14dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	9c 8b       	std	Y+20, r25	; 0x14
    14e6:	8b 8b       	std	Y+19, r24	; 0x13
    14e8:	8b 89       	ldd	r24, Y+19	; 0x13
    14ea:	9c 89       	ldd	r25, Y+20	; 0x14
    14ec:	98 8b       	std	Y+16, r25	; 0x10
    14ee:	8f 87       	std	Y+15, r24	; 0x0f
    14f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    14f2:	98 89       	ldd	r25, Y+16	; 0x10
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	f1 f7       	brne	.-4      	; 0x14f4 <Leds_VoidPingPong_Every_250ms+0x118>
    14f8:	98 8b       	std	Y+16, r25	; 0x10
    14fa:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);
		LED_voidOff(&led[i]);
    14fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14fe:	28 2f       	mov	r18, r24
    1500:	33 27       	eor	r19, r19
    1502:	27 fd       	sbrc	r18, 7
    1504:	30 95       	com	r19
    1506:	c9 01       	movw	r24, r18
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	28 0f       	add	r18, r24
    150e:	39 1f       	adc	r19, r25
    1510:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1512:	98 a1       	ldd	r25, Y+32	; 0x20
    1514:	82 0f       	add	r24, r18
    1516:	93 1f       	adc	r25, r19
    1518:	0e 94 49 12 	call	0x2492	; 0x2492 <LED_voidOff>

}
/************************************************************************/
void Leds_VoidPingPong_Every_250ms(LED_t * led)
{
	for(s8 i = 0 ; i < 8 ; i++)
    151c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    151e:	8f 5f       	subi	r24, 0xFF	; 255
    1520:	8e 8f       	std	Y+30, r24	; 0x1e
    1522:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1524:	88 30       	cpi	r24, 0x08	; 8
    1526:	0c f4       	brge	.+2      	; 0x152a <Leds_VoidPingPong_Every_250ms+0x14e>
    1528:	67 cf       	rjmp	.-306    	; 0x13f8 <Leds_VoidPingPong_Every_250ms+0x1c>
	{
		LED_voidOn(&led[i]);
		_delay_ms(250);
		LED_voidOff(&led[i]);
	}
	for(s8 i = 6 ; i >=0 ; i--)
    152a:	86 e0       	ldi	r24, 0x06	; 6
    152c:	8d 8f       	std	Y+29, r24	; 0x1d
    152e:	95 c0       	rjmp	.+298    	; 0x165a <Leds_VoidPingPong_Every_250ms+0x27e>
	{
		LED_voidOn(&led[i]);
    1530:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1532:	28 2f       	mov	r18, r24
    1534:	33 27       	eor	r19, r19
    1536:	27 fd       	sbrc	r18, 7
    1538:	30 95       	com	r19
    153a:	c9 01       	movw	r24, r18
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	28 0f       	add	r18, r24
    1542:	39 1f       	adc	r19, r25
    1544:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1546:	98 a1       	ldd	r25, Y+32	; 0x20
    1548:	82 0f       	add	r24, r18
    154a:	93 1f       	adc	r25, r19
    154c:	0e 94 15 12 	call	0x242a	; 0x242a <LED_voidOn>
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	aa e7       	ldi	r26, 0x7A	; 122
    1556:	b3 e4       	ldi	r27, 0x43	; 67
    1558:	8b 87       	std	Y+11, r24	; 0x0b
    155a:	9c 87       	std	Y+12, r25	; 0x0c
    155c:	ad 87       	std	Y+13, r26	; 0x0d
    155e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1560:	6b 85       	ldd	r22, Y+11	; 0x0b
    1562:	7c 85       	ldd	r23, Y+12	; 0x0c
    1564:	8d 85       	ldd	r24, Y+13	; 0x0d
    1566:	9e 85       	ldd	r25, Y+14	; 0x0e
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	4a ef       	ldi	r20, 0xFA	; 250
    156e:	54 e4       	ldi	r21, 0x44	; 68
    1570:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	8f 83       	std	Y+7, r24	; 0x07
    157a:	98 87       	std	Y+8, r25	; 0x08
    157c:	a9 87       	std	Y+9, r26	; 0x09
    157e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1580:	6f 81       	ldd	r22, Y+7	; 0x07
    1582:	78 85       	ldd	r23, Y+8	; 0x08
    1584:	89 85       	ldd	r24, Y+9	; 0x09
    1586:	9a 85       	ldd	r25, Y+10	; 0x0a
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	40 e8       	ldi	r20, 0x80	; 128
    158e:	5f e3       	ldi	r21, 0x3F	; 63
    1590:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1594:	88 23       	and	r24, r24
    1596:	2c f4       	brge	.+10     	; 0x15a2 <Leds_VoidPingPong_Every_250ms+0x1c6>
		__ticks = 1;
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	9e 83       	std	Y+6, r25	; 0x06
    159e:	8d 83       	std	Y+5, r24	; 0x05
    15a0:	3f c0       	rjmp	.+126    	; 0x1620 <Leds_VoidPingPong_Every_250ms+0x244>
	else if (__tmp > 65535)
    15a2:	6f 81       	ldd	r22, Y+7	; 0x07
    15a4:	78 85       	ldd	r23, Y+8	; 0x08
    15a6:	89 85       	ldd	r24, Y+9	; 0x09
    15a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	3f ef       	ldi	r19, 0xFF	; 255
    15ae:	4f e7       	ldi	r20, 0x7F	; 127
    15b0:	57 e4       	ldi	r21, 0x47	; 71
    15b2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15b6:	18 16       	cp	r1, r24
    15b8:	4c f5       	brge	.+82     	; 0x160c <Leds_VoidPingPong_Every_250ms+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    15bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    15be:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	40 e2       	ldi	r20, 0x20	; 32
    15c8:	51 e4       	ldi	r21, 0x41	; 65
    15ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	bc 01       	movw	r22, r24
    15d4:	cd 01       	movw	r24, r26
    15d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	9e 83       	std	Y+6, r25	; 0x06
    15e0:	8d 83       	std	Y+5, r24	; 0x05
    15e2:	0f c0       	rjmp	.+30     	; 0x1602 <Leds_VoidPingPong_Every_250ms+0x226>
    15e4:	88 ec       	ldi	r24, 0xC8	; 200
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	9c 83       	std	Y+4, r25	; 0x04
    15ea:	8b 83       	std	Y+3, r24	; 0x03
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	9c 81       	ldd	r25, Y+4	; 0x04
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	f1 f7       	brne	.-4      	; 0x15f0 <Leds_VoidPingPong_Every_250ms+0x214>
    15f4:	9c 83       	std	Y+4, r25	; 0x04
    15f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f8:	8d 81       	ldd	r24, Y+5	; 0x05
    15fa:	9e 81       	ldd	r25, Y+6	; 0x06
    15fc:	01 97       	sbiw	r24, 0x01	; 1
    15fe:	9e 83       	std	Y+6, r25	; 0x06
    1600:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1602:	8d 81       	ldd	r24, Y+5	; 0x05
    1604:	9e 81       	ldd	r25, Y+6	; 0x06
    1606:	00 97       	sbiw	r24, 0x00	; 0
    1608:	69 f7       	brne	.-38     	; 0x15e4 <Leds_VoidPingPong_Every_250ms+0x208>
    160a:	14 c0       	rjmp	.+40     	; 0x1634 <Leds_VoidPingPong_Every_250ms+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    160c:	6f 81       	ldd	r22, Y+7	; 0x07
    160e:	78 85       	ldd	r23, Y+8	; 0x08
    1610:	89 85       	ldd	r24, Y+9	; 0x09
    1612:	9a 85       	ldd	r25, Y+10	; 0x0a
    1614:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	9e 83       	std	Y+6, r25	; 0x06
    161e:	8d 83       	std	Y+5, r24	; 0x05
    1620:	8d 81       	ldd	r24, Y+5	; 0x05
    1622:	9e 81       	ldd	r25, Y+6	; 0x06
    1624:	9a 83       	std	Y+2, r25	; 0x02
    1626:	89 83       	std	Y+1, r24	; 0x01
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	9a 81       	ldd	r25, Y+2	; 0x02
    162c:	01 97       	sbiw	r24, 0x01	; 1
    162e:	f1 f7       	brne	.-4      	; 0x162c <Leds_VoidPingPong_Every_250ms+0x250>
    1630:	9a 83       	std	Y+2, r25	; 0x02
    1632:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LED_voidOff(&led[i]);
    1634:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1636:	28 2f       	mov	r18, r24
    1638:	33 27       	eor	r19, r19
    163a:	27 fd       	sbrc	r18, 7
    163c:	30 95       	com	r19
    163e:	c9 01       	movw	r24, r18
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	28 0f       	add	r18, r24
    1646:	39 1f       	adc	r19, r25
    1648:	8f 8d       	ldd	r24, Y+31	; 0x1f
    164a:	98 a1       	ldd	r25, Y+32	; 0x20
    164c:	82 0f       	add	r24, r18
    164e:	93 1f       	adc	r25, r19
    1650:	0e 94 49 12 	call	0x2492	; 0x2492 <LED_voidOff>
	{
		LED_voidOn(&led[i]);
		_delay_ms(250);
		LED_voidOff(&led[i]);
	}
	for(s8 i = 6 ; i >=0 ; i--)
    1654:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1656:	81 50       	subi	r24, 0x01	; 1
    1658:	8d 8f       	std	Y+29, r24	; 0x1d
    165a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    165c:	88 23       	and	r24, r24
    165e:	0c f0       	brlt	.+2      	; 0x1662 <Leds_VoidPingPong_Every_250ms+0x286>
    1660:	67 cf       	rjmp	.-306    	; 0x1530 <Leds_VoidPingPong_Every_250ms+0x154>
	{
		LED_voidOn(&led[i]);
		_delay_ms(250);
		LED_voidOff(&led[i]);
	}
}
    1662:	a0 96       	adiw	r28, 0x20	; 32
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	f8 94       	cli
    1668:	de bf       	out	0x3e, r29	; 62
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	cd bf       	out	0x3d, r28	; 61
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <Leds_VoidSnakeEffect_Every_300ms>:

/*************************************************************************/
void Leds_VoidSnakeEffect_Every_300ms(LED_t * led)
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	62 97       	sbiw	r28, 0x12	; 18
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	9a 8b       	std	Y+18, r25	; 0x12
    168a:	89 8b       	std	Y+17, r24	; 0x11
	for(s8 i = 0 ; i < 8 ; i++)
    168c:	18 8a       	std	Y+16, r1	; 0x10
    168e:	85 c0       	rjmp	.+266    	; 0x179a <Leds_VoidSnakeEffect_Every_300ms+0x126>
	{
		LED_voidOn(&led[i]);
    1690:	88 89       	ldd	r24, Y+16	; 0x10
    1692:	28 2f       	mov	r18, r24
    1694:	33 27       	eor	r19, r19
    1696:	27 fd       	sbrc	r18, 7
    1698:	30 95       	com	r19
    169a:	c9 01       	movw	r24, r18
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	28 0f       	add	r18, r24
    16a2:	39 1f       	adc	r19, r25
    16a4:	89 89       	ldd	r24, Y+17	; 0x11
    16a6:	9a 89       	ldd	r25, Y+18	; 0x12
    16a8:	82 0f       	add	r24, r18
    16aa:	93 1f       	adc	r25, r19
    16ac:	0e 94 15 12 	call	0x242a	; 0x242a <LED_voidOn>
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	aa e7       	ldi	r26, 0x7A	; 122
    16b6:	b3 e4       	ldi	r27, 0x43	; 67
    16b8:	8b 87       	std	Y+11, r24	; 0x0b
    16ba:	9c 87       	std	Y+12, r25	; 0x0c
    16bc:	ad 87       	std	Y+13, r26	; 0x0d
    16be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	4a ef       	ldi	r20, 0xFA	; 250
    16ce:	54 e4       	ldi	r21, 0x44	; 68
    16d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	8f 83       	std	Y+7, r24	; 0x07
    16da:	98 87       	std	Y+8, r25	; 0x08
    16dc:	a9 87       	std	Y+9, r26	; 0x09
    16de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16e0:	6f 81       	ldd	r22, Y+7	; 0x07
    16e2:	78 85       	ldd	r23, Y+8	; 0x08
    16e4:	89 85       	ldd	r24, Y+9	; 0x09
    16e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	40 e8       	ldi	r20, 0x80	; 128
    16ee:	5f e3       	ldi	r21, 0x3F	; 63
    16f0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16f4:	88 23       	and	r24, r24
    16f6:	2c f4       	brge	.+10     	; 0x1702 <Leds_VoidSnakeEffect_Every_300ms+0x8e>
		__ticks = 1;
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	9e 83       	std	Y+6, r25	; 0x06
    16fe:	8d 83       	std	Y+5, r24	; 0x05
    1700:	3f c0       	rjmp	.+126    	; 0x1780 <Leds_VoidSnakeEffect_Every_300ms+0x10c>
	else if (__tmp > 65535)
    1702:	6f 81       	ldd	r22, Y+7	; 0x07
    1704:	78 85       	ldd	r23, Y+8	; 0x08
    1706:	89 85       	ldd	r24, Y+9	; 0x09
    1708:	9a 85       	ldd	r25, Y+10	; 0x0a
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	3f ef       	ldi	r19, 0xFF	; 255
    170e:	4f e7       	ldi	r20, 0x7F	; 127
    1710:	57 e4       	ldi	r21, 0x47	; 71
    1712:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1716:	18 16       	cp	r1, r24
    1718:	4c f5       	brge	.+82     	; 0x176c <Leds_VoidSnakeEffect_Every_300ms+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    171a:	6b 85       	ldd	r22, Y+11	; 0x0b
    171c:	7c 85       	ldd	r23, Y+12	; 0x0c
    171e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1720:	9e 85       	ldd	r25, Y+14	; 0x0e
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	40 e2       	ldi	r20, 0x20	; 32
    1728:	51 e4       	ldi	r21, 0x41	; 65
    172a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	bc 01       	movw	r22, r24
    1734:	cd 01       	movw	r24, r26
    1736:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	9e 83       	std	Y+6, r25	; 0x06
    1740:	8d 83       	std	Y+5, r24	; 0x05
    1742:	0f c0       	rjmp	.+30     	; 0x1762 <Leds_VoidSnakeEffect_Every_300ms+0xee>
    1744:	88 ec       	ldi	r24, 0xC8	; 200
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	9c 83       	std	Y+4, r25	; 0x04
    174a:	8b 83       	std	Y+3, r24	; 0x03
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	9c 81       	ldd	r25, Y+4	; 0x04
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	f1 f7       	brne	.-4      	; 0x1750 <Leds_VoidSnakeEffect_Every_300ms+0xdc>
    1754:	9c 83       	std	Y+4, r25	; 0x04
    1756:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1758:	8d 81       	ldd	r24, Y+5	; 0x05
    175a:	9e 81       	ldd	r25, Y+6	; 0x06
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	9e 83       	std	Y+6, r25	; 0x06
    1760:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1762:	8d 81       	ldd	r24, Y+5	; 0x05
    1764:	9e 81       	ldd	r25, Y+6	; 0x06
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	69 f7       	brne	.-38     	; 0x1744 <Leds_VoidSnakeEffect_Every_300ms+0xd0>
    176a:	14 c0       	rjmp	.+40     	; 0x1794 <Leds_VoidSnakeEffect_Every_300ms+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    176c:	6f 81       	ldd	r22, Y+7	; 0x07
    176e:	78 85       	ldd	r23, Y+8	; 0x08
    1770:	89 85       	ldd	r24, Y+9	; 0x09
    1772:	9a 85       	ldd	r25, Y+10	; 0x0a
    1774:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	9e 83       	std	Y+6, r25	; 0x06
    177e:	8d 83       	std	Y+5, r24	; 0x05
    1780:	8d 81       	ldd	r24, Y+5	; 0x05
    1782:	9e 81       	ldd	r25, Y+6	; 0x06
    1784:	9a 83       	std	Y+2, r25	; 0x02
    1786:	89 83       	std	Y+1, r24	; 0x01
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	9a 81       	ldd	r25, Y+2	; 0x02
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	f1 f7       	brne	.-4      	; 0x178c <Leds_VoidSnakeEffect_Every_300ms+0x118>
    1790:	9a 83       	std	Y+2, r25	; 0x02
    1792:	89 83       	std	Y+1, r24	; 0x01
}

/*************************************************************************/
void Leds_VoidSnakeEffect_Every_300ms(LED_t * led)
{
	for(s8 i = 0 ; i < 8 ; i++)
    1794:	88 89       	ldd	r24, Y+16	; 0x10
    1796:	8f 5f       	subi	r24, 0xFF	; 255
    1798:	88 8b       	std	Y+16, r24	; 0x10
    179a:	88 89       	ldd	r24, Y+16	; 0x10
    179c:	88 30       	cpi	r24, 0x08	; 8
    179e:	0c f4       	brge	.+2      	; 0x17a2 <Leds_VoidSnakeEffect_Every_300ms+0x12e>
    17a0:	77 cf       	rjmp	.-274    	; 0x1690 <Leds_VoidSnakeEffect_Every_300ms+0x1c>
	{
		LED_voidOn(&led[i]);
		_delay_ms(250);
	}
	for(s8 i = 0 ; i < 8 ; i++)
    17a2:	1f 86       	std	Y+15, r1	; 0x0f
    17a4:	13 c0       	rjmp	.+38     	; 0x17cc <Leds_VoidSnakeEffect_Every_300ms+0x158>
	{
		LED_voidOff(&led[i]);
    17a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    17a8:	28 2f       	mov	r18, r24
    17aa:	33 27       	eor	r19, r19
    17ac:	27 fd       	sbrc	r18, 7
    17ae:	30 95       	com	r19
    17b0:	c9 01       	movw	r24, r18
    17b2:	88 0f       	add	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	28 0f       	add	r18, r24
    17b8:	39 1f       	adc	r19, r25
    17ba:	89 89       	ldd	r24, Y+17	; 0x11
    17bc:	9a 89       	ldd	r25, Y+18	; 0x12
    17be:	82 0f       	add	r24, r18
    17c0:	93 1f       	adc	r25, r19
    17c2:	0e 94 49 12 	call	0x2492	; 0x2492 <LED_voidOff>
	for(s8 i = 0 ; i < 8 ; i++)
	{
		LED_voidOn(&led[i]);
		_delay_ms(250);
	}
	for(s8 i = 0 ; i < 8 ; i++)
    17c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    17c8:	8f 5f       	subi	r24, 0xFF	; 255
    17ca:	8f 87       	std	Y+15, r24	; 0x0f
    17cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ce:	88 30       	cpi	r24, 0x08	; 8
    17d0:	54 f3       	brlt	.-44     	; 0x17a6 <Leds_VoidSnakeEffect_Every_300ms+0x132>
	{
		LED_voidOff(&led[i]);

	}

}
    17d2:	62 96       	adiw	r28, 0x12	; 18
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	de bf       	out	0x3e, r29	; 62
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	cd bf       	out	0x3d, r28	; 61
    17de:	cf 91       	pop	r28
    17e0:	df 91       	pop	r29
    17e2:	08 95       	ret

000017e4 <Leds_VoidConverging_And_Diverging_Every_300ms>:

/**********************************************************************/
void Leds_VoidConverging_And_Diverging_Every_300ms(LED_t * led)
{
    17e4:	df 93       	push	r29
    17e6:	cf 93       	push	r28
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	a1 97       	sbiw	r28, 0x21	; 33
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	f8 94       	cli
    17f2:	de bf       	out	0x3e, r29	; 62
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	cd bf       	out	0x3d, r28	; 61
    17f8:	99 a3       	std	Y+33, r25	; 0x21
    17fa:	88 a3       	std	Y+32, r24	; 0x20
	s8 j = 7;
    17fc:	87 e0       	ldi	r24, 0x07	; 7
    17fe:	8f 8f       	std	Y+31, r24	; 0x1f
	for(s8 i = 3 ; i >= 0 ; i--)
    1800:	83 e0       	ldi	r24, 0x03	; 3
    1802:	8e 8f       	std	Y+30, r24	; 0x1e
    1804:	c7 c0       	rjmp	.+398    	; 0x1994 <Leds_VoidConverging_And_Diverging_Every_300ms+0x1b0>
	{
		LED_voidOn(&led[i]);
    1806:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1808:	28 2f       	mov	r18, r24
    180a:	33 27       	eor	r19, r19
    180c:	27 fd       	sbrc	r18, 7
    180e:	30 95       	com	r19
    1810:	c9 01       	movw	r24, r18
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	28 0f       	add	r18, r24
    1818:	39 1f       	adc	r19, r25
    181a:	88 a1       	ldd	r24, Y+32	; 0x20
    181c:	99 a1       	ldd	r25, Y+33	; 0x21
    181e:	82 0f       	add	r24, r18
    1820:	93 1f       	adc	r25, r19
    1822:	0e 94 15 12 	call	0x242a	; 0x242a <LED_voidOn>
		LED_voidOn(&led[j - i]);
    1826:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1828:	28 2f       	mov	r18, r24
    182a:	33 27       	eor	r19, r19
    182c:	27 fd       	sbrc	r18, 7
    182e:	30 95       	com	r19
    1830:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1832:	99 27       	eor	r25, r25
    1834:	87 fd       	sbrc	r24, 7
    1836:	90 95       	com	r25
    1838:	a9 01       	movw	r20, r18
    183a:	48 1b       	sub	r20, r24
    183c:	59 0b       	sbc	r21, r25
    183e:	ca 01       	movw	r24, r20
    1840:	9c 01       	movw	r18, r24
    1842:	c9 01       	movw	r24, r18
    1844:	88 0f       	add	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	28 0f       	add	r18, r24
    184a:	39 1f       	adc	r19, r25
    184c:	88 a1       	ldd	r24, Y+32	; 0x20
    184e:	99 a1       	ldd	r25, Y+33	; 0x21
    1850:	82 0f       	add	r24, r18
    1852:	93 1f       	adc	r25, r19
    1854:	0e 94 15 12 	call	0x242a	; 0x242a <LED_voidOn>
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	a6 e9       	ldi	r26, 0x96	; 150
    185e:	b3 e4       	ldi	r27, 0x43	; 67
    1860:	89 8f       	std	Y+25, r24	; 0x19
    1862:	9a 8f       	std	Y+26, r25	; 0x1a
    1864:	ab 8f       	std	Y+27, r26	; 0x1b
    1866:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1868:	69 8d       	ldd	r22, Y+25	; 0x19
    186a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    186c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    186e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	4a ef       	ldi	r20, 0xFA	; 250
    1876:	54 e4       	ldi	r21, 0x44	; 68
    1878:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	8d 8b       	std	Y+21, r24	; 0x15
    1882:	9e 8b       	std	Y+22, r25	; 0x16
    1884:	af 8b       	std	Y+23, r26	; 0x17
    1886:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1888:	6d 89       	ldd	r22, Y+21	; 0x15
    188a:	7e 89       	ldd	r23, Y+22	; 0x16
    188c:	8f 89       	ldd	r24, Y+23	; 0x17
    188e:	98 8d       	ldd	r25, Y+24	; 0x18
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	40 e8       	ldi	r20, 0x80	; 128
    1896:	5f e3       	ldi	r21, 0x3F	; 63
    1898:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    189c:	88 23       	and	r24, r24
    189e:	2c f4       	brge	.+10     	; 0x18aa <Leds_VoidConverging_And_Diverging_Every_300ms+0xc6>
		__ticks = 1;
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	9c 8b       	std	Y+20, r25	; 0x14
    18a6:	8b 8b       	std	Y+19, r24	; 0x13
    18a8:	3f c0       	rjmp	.+126    	; 0x1928 <Leds_VoidConverging_And_Diverging_Every_300ms+0x144>
	else if (__tmp > 65535)
    18aa:	6d 89       	ldd	r22, Y+21	; 0x15
    18ac:	7e 89       	ldd	r23, Y+22	; 0x16
    18ae:	8f 89       	ldd	r24, Y+23	; 0x17
    18b0:	98 8d       	ldd	r25, Y+24	; 0x18
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	3f ef       	ldi	r19, 0xFF	; 255
    18b6:	4f e7       	ldi	r20, 0x7F	; 127
    18b8:	57 e4       	ldi	r21, 0x47	; 71
    18ba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18be:	18 16       	cp	r1, r24
    18c0:	4c f5       	brge	.+82     	; 0x1914 <Leds_VoidConverging_And_Diverging_Every_300ms+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c2:	69 8d       	ldd	r22, Y+25	; 0x19
    18c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	40 e2       	ldi	r20, 0x20	; 32
    18d0:	51 e4       	ldi	r21, 0x41	; 65
    18d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	bc 01       	movw	r22, r24
    18dc:	cd 01       	movw	r24, r26
    18de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	9c 8b       	std	Y+20, r25	; 0x14
    18e8:	8b 8b       	std	Y+19, r24	; 0x13
    18ea:	0f c0       	rjmp	.+30     	; 0x190a <Leds_VoidConverging_And_Diverging_Every_300ms+0x126>
    18ec:	88 ec       	ldi	r24, 0xC8	; 200
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	9a 8b       	std	Y+18, r25	; 0x12
    18f2:	89 8b       	std	Y+17, r24	; 0x11
    18f4:	89 89       	ldd	r24, Y+17	; 0x11
    18f6:	9a 89       	ldd	r25, Y+18	; 0x12
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	f1 f7       	brne	.-4      	; 0x18f8 <Leds_VoidConverging_And_Diverging_Every_300ms+0x114>
    18fc:	9a 8b       	std	Y+18, r25	; 0x12
    18fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1900:	8b 89       	ldd	r24, Y+19	; 0x13
    1902:	9c 89       	ldd	r25, Y+20	; 0x14
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	9c 8b       	std	Y+20, r25	; 0x14
    1908:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    190a:	8b 89       	ldd	r24, Y+19	; 0x13
    190c:	9c 89       	ldd	r25, Y+20	; 0x14
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	69 f7       	brne	.-38     	; 0x18ec <Leds_VoidConverging_And_Diverging_Every_300ms+0x108>
    1912:	14 c0       	rjmp	.+40     	; 0x193c <Leds_VoidConverging_And_Diverging_Every_300ms+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1914:	6d 89       	ldd	r22, Y+21	; 0x15
    1916:	7e 89       	ldd	r23, Y+22	; 0x16
    1918:	8f 89       	ldd	r24, Y+23	; 0x17
    191a:	98 8d       	ldd	r25, Y+24	; 0x18
    191c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	9c 8b       	std	Y+20, r25	; 0x14
    1926:	8b 8b       	std	Y+19, r24	; 0x13
    1928:	8b 89       	ldd	r24, Y+19	; 0x13
    192a:	9c 89       	ldd	r25, Y+20	; 0x14
    192c:	98 8b       	std	Y+16, r25	; 0x10
    192e:	8f 87       	std	Y+15, r24	; 0x0f
    1930:	8f 85       	ldd	r24, Y+15	; 0x0f
    1932:	98 89       	ldd	r25, Y+16	; 0x10
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <Leds_VoidConverging_And_Diverging_Every_300ms+0x150>
    1938:	98 8b       	std	Y+16, r25	; 0x10
    193a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(300);
		LED_voidOff(&led[i]);
    193c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    193e:	28 2f       	mov	r18, r24
    1940:	33 27       	eor	r19, r19
    1942:	27 fd       	sbrc	r18, 7
    1944:	30 95       	com	r19
    1946:	c9 01       	movw	r24, r18
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	28 0f       	add	r18, r24
    194e:	39 1f       	adc	r19, r25
    1950:	88 a1       	ldd	r24, Y+32	; 0x20
    1952:	99 a1       	ldd	r25, Y+33	; 0x21
    1954:	82 0f       	add	r24, r18
    1956:	93 1f       	adc	r25, r19
    1958:	0e 94 49 12 	call	0x2492	; 0x2492 <LED_voidOff>
		LED_voidOff(&led[j - i]);
    195c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    195e:	28 2f       	mov	r18, r24
    1960:	33 27       	eor	r19, r19
    1962:	27 fd       	sbrc	r18, 7
    1964:	30 95       	com	r19
    1966:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1968:	99 27       	eor	r25, r25
    196a:	87 fd       	sbrc	r24, 7
    196c:	90 95       	com	r25
    196e:	a9 01       	movw	r20, r18
    1970:	48 1b       	sub	r20, r24
    1972:	59 0b       	sbc	r21, r25
    1974:	ca 01       	movw	r24, r20
    1976:	9c 01       	movw	r18, r24
    1978:	c9 01       	movw	r24, r18
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	28 0f       	add	r18, r24
    1980:	39 1f       	adc	r19, r25
    1982:	88 a1       	ldd	r24, Y+32	; 0x20
    1984:	99 a1       	ldd	r25, Y+33	; 0x21
    1986:	82 0f       	add	r24, r18
    1988:	93 1f       	adc	r25, r19
    198a:	0e 94 49 12 	call	0x2492	; 0x2492 <LED_voidOff>

/**********************************************************************/
void Leds_VoidConverging_And_Diverging_Every_300ms(LED_t * led)
{
	s8 j = 7;
	for(s8 i = 3 ; i >= 0 ; i--)
    198e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1990:	81 50       	subi	r24, 0x01	; 1
    1992:	8e 8f       	std	Y+30, r24	; 0x1e
    1994:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1996:	88 23       	and	r24, r24
    1998:	0c f0       	brlt	.+2      	; 0x199c <Leds_VoidConverging_And_Diverging_Every_300ms+0x1b8>
    199a:	35 cf       	rjmp	.-406    	; 0x1806 <Leds_VoidConverging_And_Diverging_Every_300ms+0x22>
		_delay_ms(300);
		LED_voidOff(&led[i]);
		LED_voidOff(&led[j - i]);
	}

	for(s8 i = 1 ; i < 4 ; i++)
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	8d 8f       	std	Y+29, r24	; 0x1d
    19a0:	c7 c0       	rjmp	.+398    	; 0x1b30 <Leds_VoidConverging_And_Diverging_Every_300ms+0x34c>
	{
		LED_voidOn(&led[i]);
    19a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19a4:	28 2f       	mov	r18, r24
    19a6:	33 27       	eor	r19, r19
    19a8:	27 fd       	sbrc	r18, 7
    19aa:	30 95       	com	r19
    19ac:	c9 01       	movw	r24, r18
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	28 0f       	add	r18, r24
    19b4:	39 1f       	adc	r19, r25
    19b6:	88 a1       	ldd	r24, Y+32	; 0x20
    19b8:	99 a1       	ldd	r25, Y+33	; 0x21
    19ba:	82 0f       	add	r24, r18
    19bc:	93 1f       	adc	r25, r19
    19be:	0e 94 15 12 	call	0x242a	; 0x242a <LED_voidOn>
		LED_voidOn(&led[j - i]);
    19c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19c4:	28 2f       	mov	r18, r24
    19c6:	33 27       	eor	r19, r19
    19c8:	27 fd       	sbrc	r18, 7
    19ca:	30 95       	com	r19
    19cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19ce:	99 27       	eor	r25, r25
    19d0:	87 fd       	sbrc	r24, 7
    19d2:	90 95       	com	r25
    19d4:	a9 01       	movw	r20, r18
    19d6:	48 1b       	sub	r20, r24
    19d8:	59 0b       	sbc	r21, r25
    19da:	ca 01       	movw	r24, r20
    19dc:	9c 01       	movw	r18, r24
    19de:	c9 01       	movw	r24, r18
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	28 0f       	add	r18, r24
    19e6:	39 1f       	adc	r19, r25
    19e8:	88 a1       	ldd	r24, Y+32	; 0x20
    19ea:	99 a1       	ldd	r25, Y+33	; 0x21
    19ec:	82 0f       	add	r24, r18
    19ee:	93 1f       	adc	r25, r19
    19f0:	0e 94 15 12 	call	0x242a	; 0x242a <LED_voidOn>
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	a6 e9       	ldi	r26, 0x96	; 150
    19fa:	b3 e4       	ldi	r27, 0x43	; 67
    19fc:	8b 87       	std	Y+11, r24	; 0x0b
    19fe:	9c 87       	std	Y+12, r25	; 0x0c
    1a00:	ad 87       	std	Y+13, r26	; 0x0d
    1a02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	4a ef       	ldi	r20, 0xFA	; 250
    1a12:	54 e4       	ldi	r21, 0x44	; 68
    1a14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	8f 83       	std	Y+7, r24	; 0x07
    1a1e:	98 87       	std	Y+8, r25	; 0x08
    1a20:	a9 87       	std	Y+9, r26	; 0x09
    1a22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a24:	6f 81       	ldd	r22, Y+7	; 0x07
    1a26:	78 85       	ldd	r23, Y+8	; 0x08
    1a28:	89 85       	ldd	r24, Y+9	; 0x09
    1a2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	40 e8       	ldi	r20, 0x80	; 128
    1a32:	5f e3       	ldi	r21, 0x3F	; 63
    1a34:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a38:	88 23       	and	r24, r24
    1a3a:	2c f4       	brge	.+10     	; 0x1a46 <Leds_VoidConverging_And_Diverging_Every_300ms+0x262>
		__ticks = 1;
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	9e 83       	std	Y+6, r25	; 0x06
    1a42:	8d 83       	std	Y+5, r24	; 0x05
    1a44:	3f c0       	rjmp	.+126    	; 0x1ac4 <Leds_VoidConverging_And_Diverging_Every_300ms+0x2e0>
	else if (__tmp > 65535)
    1a46:	6f 81       	ldd	r22, Y+7	; 0x07
    1a48:	78 85       	ldd	r23, Y+8	; 0x08
    1a4a:	89 85       	ldd	r24, Y+9	; 0x09
    1a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	3f ef       	ldi	r19, 0xFF	; 255
    1a52:	4f e7       	ldi	r20, 0x7F	; 127
    1a54:	57 e4       	ldi	r21, 0x47	; 71
    1a56:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a5a:	18 16       	cp	r1, r24
    1a5c:	4c f5       	brge	.+82     	; 0x1ab0 <Leds_VoidConverging_And_Diverging_Every_300ms+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	40 e2       	ldi	r20, 0x20	; 32
    1a6c:	51 e4       	ldi	r21, 0x41	; 65
    1a6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	bc 01       	movw	r22, r24
    1a78:	cd 01       	movw	r24, r26
    1a7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	9e 83       	std	Y+6, r25	; 0x06
    1a84:	8d 83       	std	Y+5, r24	; 0x05
    1a86:	0f c0       	rjmp	.+30     	; 0x1aa6 <Leds_VoidConverging_And_Diverging_Every_300ms+0x2c2>
    1a88:	88 ec       	ldi	r24, 0xC8	; 200
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	9c 83       	std	Y+4, r25	; 0x04
    1a8e:	8b 83       	std	Y+3, r24	; 0x03
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	9c 81       	ldd	r25, Y+4	; 0x04
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	f1 f7       	brne	.-4      	; 0x1a94 <Leds_VoidConverging_And_Diverging_Every_300ms+0x2b0>
    1a98:	9c 83       	std	Y+4, r25	; 0x04
    1a9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa0:	01 97       	sbiw	r24, 0x01	; 1
    1aa2:	9e 83       	std	Y+6, r25	; 0x06
    1aa4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	69 f7       	brne	.-38     	; 0x1a88 <Leds_VoidConverging_And_Diverging_Every_300ms+0x2a4>
    1aae:	14 c0       	rjmp	.+40     	; 0x1ad8 <Leds_VoidConverging_And_Diverging_Every_300ms+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab2:	78 85       	ldd	r23, Y+8	; 0x08
    1ab4:	89 85       	ldd	r24, Y+9	; 0x09
    1ab6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	9e 83       	std	Y+6, r25	; 0x06
    1ac2:	8d 83       	std	Y+5, r24	; 0x05
    1ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac8:	9a 83       	std	Y+2, r25	; 0x02
    1aca:	89 83       	std	Y+1, r24	; 0x01
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	f1 f7       	brne	.-4      	; 0x1ad0 <Leds_VoidConverging_And_Diverging_Every_300ms+0x2ec>
    1ad4:	9a 83       	std	Y+2, r25	; 0x02
    1ad6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);
		LED_voidOff(&led[i]);
    1ad8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ada:	28 2f       	mov	r18, r24
    1adc:	33 27       	eor	r19, r19
    1ade:	27 fd       	sbrc	r18, 7
    1ae0:	30 95       	com	r19
    1ae2:	c9 01       	movw	r24, r18
    1ae4:	88 0f       	add	r24, r24
    1ae6:	99 1f       	adc	r25, r25
    1ae8:	28 0f       	add	r18, r24
    1aea:	39 1f       	adc	r19, r25
    1aec:	88 a1       	ldd	r24, Y+32	; 0x20
    1aee:	99 a1       	ldd	r25, Y+33	; 0x21
    1af0:	82 0f       	add	r24, r18
    1af2:	93 1f       	adc	r25, r19
    1af4:	0e 94 49 12 	call	0x2492	; 0x2492 <LED_voidOff>
		LED_voidOff(&led[j - i]);
    1af8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1afa:	28 2f       	mov	r18, r24
    1afc:	33 27       	eor	r19, r19
    1afe:	27 fd       	sbrc	r18, 7
    1b00:	30 95       	com	r19
    1b02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b04:	99 27       	eor	r25, r25
    1b06:	87 fd       	sbrc	r24, 7
    1b08:	90 95       	com	r25
    1b0a:	a9 01       	movw	r20, r18
    1b0c:	48 1b       	sub	r20, r24
    1b0e:	59 0b       	sbc	r21, r25
    1b10:	ca 01       	movw	r24, r20
    1b12:	9c 01       	movw	r18, r24
    1b14:	c9 01       	movw	r24, r18
    1b16:	88 0f       	add	r24, r24
    1b18:	99 1f       	adc	r25, r25
    1b1a:	28 0f       	add	r18, r24
    1b1c:	39 1f       	adc	r19, r25
    1b1e:	88 a1       	ldd	r24, Y+32	; 0x20
    1b20:	99 a1       	ldd	r25, Y+33	; 0x21
    1b22:	82 0f       	add	r24, r18
    1b24:	93 1f       	adc	r25, r19
    1b26:	0e 94 49 12 	call	0x2492	; 0x2492 <LED_voidOff>
		_delay_ms(300);
		LED_voidOff(&led[i]);
		LED_voidOff(&led[j - i]);
	}

	for(s8 i = 1 ; i < 4 ; i++)
    1b2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b2c:	8f 5f       	subi	r24, 0xFF	; 255
    1b2e:	8d 8f       	std	Y+29, r24	; 0x1d
    1b30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b32:	84 30       	cpi	r24, 0x04	; 4
    1b34:	0c f4       	brge	.+2      	; 0x1b38 <Leds_VoidConverging_And_Diverging_Every_300ms+0x354>
    1b36:	35 cf       	rjmp	.-406    	; 0x19a2 <Leds_VoidConverging_And_Diverging_Every_300ms+0x1be>
		LED_voidOn(&led[j - i]);
		_delay_ms(300);
		LED_voidOff(&led[i]);
		LED_voidOff(&led[j - i]);
	}
}
    1b38:	a1 96       	adiw	r28, 0x21	; 33
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	f8 94       	cli
    1b3e:	de bf       	out	0x3e, r29	; 62
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	cd bf       	out	0x3d, r28	; 61
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <DIO_voidSetPinDirection>:




void DIO_voidSetPinDirection    (u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8Direction )
{
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    1b52:	29 97       	sbiw	r28, 0x09	; 9
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	89 83       	std	Y+1, r24	; 0x01
    1b60:	6a 83       	std	Y+2, r22	; 0x02
    1b62:	4b 83       	std	Y+3, r20	; 0x03

    switch(Copy_u8Direction)
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	28 2f       	mov	r18, r24
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	39 87       	std	Y+9, r19	; 0x09
    1b6c:	28 87       	std	Y+8, r18	; 0x08
    1b6e:	88 85       	ldd	r24, Y+8	; 0x08
    1b70:	99 85       	ldd	r25, Y+9	; 0x09
    1b72:	00 97       	sbiw	r24, 0x00	; 0
    1b74:	09 f4       	brne	.+2      	; 0x1b78 <DIO_voidSetPinDirection+0x2e>
    1b76:	75 c0       	rjmp	.+234    	; 0x1c62 <DIO_voidSetPinDirection+0x118>
    1b78:	28 85       	ldd	r18, Y+8	; 0x08
    1b7a:	39 85       	ldd	r19, Y+9	; 0x09
    1b7c:	21 30       	cpi	r18, 0x01	; 1
    1b7e:	31 05       	cpc	r19, r1
    1b80:	09 f0       	breq	.+2      	; 0x1b84 <DIO_voidSetPinDirection+0x3a>
    1b82:	e2 c0       	rjmp	.+452    	; 0x1d48 <DIO_voidSetPinDirection+0x1fe>
    
    {
        case DIO_OUTPUT :
            switch(Copy_u8PortId)
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	3f 83       	std	Y+7, r19	; 0x07
    1b8c:	2e 83       	std	Y+6, r18	; 0x06
    1b8e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b90:	9f 81       	ldd	r25, Y+7	; 0x07
    1b92:	81 30       	cpi	r24, 0x01	; 1
    1b94:	91 05       	cpc	r25, r1
    1b96:	49 f1       	breq	.+82     	; 0x1bea <DIO_voidSetPinDirection+0xa0>
    1b98:	2e 81       	ldd	r18, Y+6	; 0x06
    1b9a:	3f 81       	ldd	r19, Y+7	; 0x07
    1b9c:	22 30       	cpi	r18, 0x02	; 2
    1b9e:	31 05       	cpc	r19, r1
    1ba0:	2c f4       	brge	.+10     	; 0x1bac <DIO_voidSetPinDirection+0x62>
    1ba2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba6:	00 97       	sbiw	r24, 0x00	; 0
    1ba8:	61 f0       	breq	.+24     	; 0x1bc2 <DIO_voidSetPinDirection+0x78>
    1baa:	ce c0       	rjmp	.+412    	; 0x1d48 <DIO_voidSetPinDirection+0x1fe>
    1bac:	2e 81       	ldd	r18, Y+6	; 0x06
    1bae:	3f 81       	ldd	r19, Y+7	; 0x07
    1bb0:	22 30       	cpi	r18, 0x02	; 2
    1bb2:	31 05       	cpc	r19, r1
    1bb4:	71 f1       	breq	.+92     	; 0x1c12 <DIO_voidSetPinDirection+0xc8>
    1bb6:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb8:	9f 81       	ldd	r25, Y+7	; 0x07
    1bba:	83 30       	cpi	r24, 0x03	; 3
    1bbc:	91 05       	cpc	r25, r1
    1bbe:	e9 f1       	breq	.+122    	; 0x1c3a <DIO_voidSetPinDirection+0xf0>
    1bc0:	c3 c0       	rjmp	.+390    	; 0x1d48 <DIO_voidSetPinDirection+0x1fe>
            {
                case DIO_PORTA :
                                SET_BIT(DDRA_REG , Copy_u8PinId);
    1bc2:	aa e3       	ldi	r26, 0x3A	; 58
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	ea e3       	ldi	r30, 0x3A	; 58
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	48 2f       	mov	r20, r24
    1bce:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd0:	28 2f       	mov	r18, r24
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	02 2e       	mov	r0, r18
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <DIO_voidSetPinDirection+0x96>
    1bdc:	88 0f       	add	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	0a 94       	dec	r0
    1be2:	e2 f7       	brpl	.-8      	; 0x1bdc <DIO_voidSetPinDirection+0x92>
    1be4:	84 2b       	or	r24, r20
    1be6:	8c 93       	st	X, r24
    1be8:	af c0       	rjmp	.+350    	; 0x1d48 <DIO_voidSetPinDirection+0x1fe>
                break ; 
                case DIO_PORTB :
                                SET_BIT(DDRB_REG , Copy_u8PinId);
    1bea:	a7 e3       	ldi	r26, 0x37	; 55
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	e7 e3       	ldi	r30, 0x37	; 55
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	48 2f       	mov	r20, r24
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	02 2e       	mov	r0, r18
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <DIO_voidSetPinDirection+0xbe>
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	0a 94       	dec	r0
    1c0a:	e2 f7       	brpl	.-8      	; 0x1c04 <DIO_voidSetPinDirection+0xba>
    1c0c:	84 2b       	or	r24, r20
    1c0e:	8c 93       	st	X, r24
    1c10:	9b c0       	rjmp	.+310    	; 0x1d48 <DIO_voidSetPinDirection+0x1fe>
                break;
                case DIO_PORTC :
                                SET_BIT(DDRC_REG , Copy_u8PinId);
    1c12:	a4 e3       	ldi	r26, 0x34	; 52
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e4 e3       	ldi	r30, 0x34	; 52
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	48 2f       	mov	r20, r24
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	02 2e       	mov	r0, r18
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <DIO_voidSetPinDirection+0xe6>
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	0a 94       	dec	r0
    1c32:	e2 f7       	brpl	.-8      	; 0x1c2c <DIO_voidSetPinDirection+0xe2>
    1c34:	84 2b       	or	r24, r20
    1c36:	8c 93       	st	X, r24
    1c38:	87 c0       	rjmp	.+270    	; 0x1d48 <DIO_voidSetPinDirection+0x1fe>
                break ; 
                case DIO_PORTD :
                                SET_BIT(DDRD_REG , Copy_u8PinId);
    1c3a:	a1 e3       	ldi	r26, 0x31	; 49
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	e1 e3       	ldi	r30, 0x31	; 49
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	48 2f       	mov	r20, r24
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	02 2e       	mov	r0, r18
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <DIO_voidSetPinDirection+0x10e>
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	0a 94       	dec	r0
    1c5a:	e2 f7       	brpl	.-8      	; 0x1c54 <DIO_voidSetPinDirection+0x10a>
    1c5c:	84 2b       	or	r24, r20
    1c5e:	8c 93       	st	X, r24
    1c60:	73 c0       	rjmp	.+230    	; 0x1d48 <DIO_voidSetPinDirection+0x1fe>
                break;
            }
        break;        
        case DIO_INPUT :
        switch(Copy_u8PortId)
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	3d 83       	std	Y+5, r19	; 0x05
    1c6a:	2c 83       	std	Y+4, r18	; 0x04
    1c6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c70:	81 30       	cpi	r24, 0x01	; 1
    1c72:	91 05       	cpc	r25, r1
    1c74:	59 f1       	breq	.+86     	; 0x1ccc <DIO_voidSetPinDirection+0x182>
    1c76:	2c 81       	ldd	r18, Y+4	; 0x04
    1c78:	3d 81       	ldd	r19, Y+5	; 0x05
    1c7a:	22 30       	cpi	r18, 0x02	; 2
    1c7c:	31 05       	cpc	r19, r1
    1c7e:	2c f4       	brge	.+10     	; 0x1c8a <DIO_voidSetPinDirection+0x140>
    1c80:	8c 81       	ldd	r24, Y+4	; 0x04
    1c82:	9d 81       	ldd	r25, Y+5	; 0x05
    1c84:	00 97       	sbiw	r24, 0x00	; 0
    1c86:	69 f0       	breq	.+26     	; 0x1ca2 <DIO_voidSetPinDirection+0x158>
    1c88:	5f c0       	rjmp	.+190    	; 0x1d48 <DIO_voidSetPinDirection+0x1fe>
    1c8a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c8c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c8e:	22 30       	cpi	r18, 0x02	; 2
    1c90:	31 05       	cpc	r19, r1
    1c92:	89 f1       	breq	.+98     	; 0x1cf6 <DIO_voidSetPinDirection+0x1ac>
    1c94:	8c 81       	ldd	r24, Y+4	; 0x04
    1c96:	9d 81       	ldd	r25, Y+5	; 0x05
    1c98:	83 30       	cpi	r24, 0x03	; 3
    1c9a:	91 05       	cpc	r25, r1
    1c9c:	09 f4       	brne	.+2      	; 0x1ca0 <DIO_voidSetPinDirection+0x156>
    1c9e:	40 c0       	rjmp	.+128    	; 0x1d20 <DIO_voidSetPinDirection+0x1d6>
    1ca0:	53 c0       	rjmp	.+166    	; 0x1d48 <DIO_voidSetPinDirection+0x1fe>
            {
                case DIO_PORTA :
                                CLR_BIT(DDRA_REG , Copy_u8PinId);
    1ca2:	aa e3       	ldi	r26, 0x3A	; 58
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	ea e3       	ldi	r30, 0x3A	; 58
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	48 2f       	mov	r20, r24
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb0:	28 2f       	mov	r18, r24
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	02 2e       	mov	r0, r18
    1cba:	02 c0       	rjmp	.+4      	; 0x1cc0 <DIO_voidSetPinDirection+0x176>
    1cbc:	88 0f       	add	r24, r24
    1cbe:	99 1f       	adc	r25, r25
    1cc0:	0a 94       	dec	r0
    1cc2:	e2 f7       	brpl	.-8      	; 0x1cbc <DIO_voidSetPinDirection+0x172>
    1cc4:	80 95       	com	r24
    1cc6:	84 23       	and	r24, r20
    1cc8:	8c 93       	st	X, r24
    1cca:	3e c0       	rjmp	.+124    	; 0x1d48 <DIO_voidSetPinDirection+0x1fe>
                break ; 
                case DIO_PORTB :
                                CLR_BIT(DDRB_REG , Copy_u8PinId);
    1ccc:	a7 e3       	ldi	r26, 0x37	; 55
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	e7 e3       	ldi	r30, 0x37	; 55
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	48 2f       	mov	r20, r24
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	02 2e       	mov	r0, r18
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <DIO_voidSetPinDirection+0x1a0>
    1ce6:	88 0f       	add	r24, r24
    1ce8:	99 1f       	adc	r25, r25
    1cea:	0a 94       	dec	r0
    1cec:	e2 f7       	brpl	.-8      	; 0x1ce6 <DIO_voidSetPinDirection+0x19c>
    1cee:	80 95       	com	r24
    1cf0:	84 23       	and	r24, r20
    1cf2:	8c 93       	st	X, r24
    1cf4:	29 c0       	rjmp	.+82     	; 0x1d48 <DIO_voidSetPinDirection+0x1fe>
                break;
                case DIO_PORTC :
                                CLR_BIT(DDRC_REG , Copy_u8PinId);
    1cf6:	a4 e3       	ldi	r26, 0x34	; 52
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e4 e3       	ldi	r30, 0x34	; 52
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	48 2f       	mov	r20, r24
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	28 2f       	mov	r18, r24
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	02 2e       	mov	r0, r18
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <DIO_voidSetPinDirection+0x1ca>
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	0a 94       	dec	r0
    1d16:	e2 f7       	brpl	.-8      	; 0x1d10 <DIO_voidSetPinDirection+0x1c6>
    1d18:	80 95       	com	r24
    1d1a:	84 23       	and	r24, r20
    1d1c:	8c 93       	st	X, r24
    1d1e:	14 c0       	rjmp	.+40     	; 0x1d48 <DIO_voidSetPinDirection+0x1fe>
                break ; 
                case DIO_PORTD :
                                CLR_BIT(DDRD_REG , Copy_u8PinId);
    1d20:	a1 e3       	ldi	r26, 0x31	; 49
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	e1 e3       	ldi	r30, 0x31	; 49
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	48 2f       	mov	r20, r24
    1d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2e:	28 2f       	mov	r18, r24
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	02 2e       	mov	r0, r18
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <DIO_voidSetPinDirection+0x1f4>
    1d3a:	88 0f       	add	r24, r24
    1d3c:	99 1f       	adc	r25, r25
    1d3e:	0a 94       	dec	r0
    1d40:	e2 f7       	brpl	.-8      	; 0x1d3a <DIO_voidSetPinDirection+0x1f0>
    1d42:	80 95       	com	r24
    1d44:	84 23       	and	r24, r20
    1d46:	8c 93       	st	X, r24
                break;
            }
        break ; 
    }
}
    1d48:	29 96       	adiw	r28, 0x09	; 9
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	f8 94       	cli
    1d4e:	de bf       	out	0x3e, r29	; 62
    1d50:	0f be       	out	0x3f, r0	; 63
    1d52:	cd bf       	out	0x3d, r28	; 61
    1d54:	cf 91       	pop	r28
    1d56:	df 91       	pop	r29
    1d58:	08 95       	ret

00001d5a <DIO_voidSetPinValue>:

void DIO_voidSetPinValue    (u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8Value )
{
    1d5a:	df 93       	push	r29
    1d5c:	cf 93       	push	r28
    1d5e:	cd b7       	in	r28, 0x3d	; 61
    1d60:	de b7       	in	r29, 0x3e	; 62
    1d62:	29 97       	sbiw	r28, 0x09	; 9
    1d64:	0f b6       	in	r0, 0x3f	; 63
    1d66:	f8 94       	cli
    1d68:	de bf       	out	0x3e, r29	; 62
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	cd bf       	out	0x3d, r28	; 61
    1d6e:	89 83       	std	Y+1, r24	; 0x01
    1d70:	6a 83       	std	Y+2, r22	; 0x02
    1d72:	4b 83       	std	Y+3, r20	; 0x03


    switch(Copy_u8Value)
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	39 87       	std	Y+9, r19	; 0x09
    1d7c:	28 87       	std	Y+8, r18	; 0x08
    1d7e:	88 85       	ldd	r24, Y+8	; 0x08
    1d80:	99 85       	ldd	r25, Y+9	; 0x09
    1d82:	00 97       	sbiw	r24, 0x00	; 0
    1d84:	09 f4       	brne	.+2      	; 0x1d88 <DIO_voidSetPinValue+0x2e>
    1d86:	75 c0       	rjmp	.+234    	; 0x1e72 <DIO_voidSetPinValue+0x118>
    1d88:	28 85       	ldd	r18, Y+8	; 0x08
    1d8a:	39 85       	ldd	r19, Y+9	; 0x09
    1d8c:	21 30       	cpi	r18, 0x01	; 1
    1d8e:	31 05       	cpc	r19, r1
    1d90:	09 f0       	breq	.+2      	; 0x1d94 <DIO_voidSetPinValue+0x3a>
    1d92:	e2 c0       	rjmp	.+452    	; 0x1f58 <DIO_voidSetPinValue+0x1fe>
    
    {
        case DIO_HIGH :
            switch(Copy_u8PortId)
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	28 2f       	mov	r18, r24
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	3f 83       	std	Y+7, r19	; 0x07
    1d9c:	2e 83       	std	Y+6, r18	; 0x06
    1d9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1da0:	9f 81       	ldd	r25, Y+7	; 0x07
    1da2:	81 30       	cpi	r24, 0x01	; 1
    1da4:	91 05       	cpc	r25, r1
    1da6:	49 f1       	breq	.+82     	; 0x1dfa <DIO_voidSetPinValue+0xa0>
    1da8:	2e 81       	ldd	r18, Y+6	; 0x06
    1daa:	3f 81       	ldd	r19, Y+7	; 0x07
    1dac:	22 30       	cpi	r18, 0x02	; 2
    1dae:	31 05       	cpc	r19, r1
    1db0:	2c f4       	brge	.+10     	; 0x1dbc <DIO_voidSetPinValue+0x62>
    1db2:	8e 81       	ldd	r24, Y+6	; 0x06
    1db4:	9f 81       	ldd	r25, Y+7	; 0x07
    1db6:	00 97       	sbiw	r24, 0x00	; 0
    1db8:	61 f0       	breq	.+24     	; 0x1dd2 <DIO_voidSetPinValue+0x78>
    1dba:	ce c0       	rjmp	.+412    	; 0x1f58 <DIO_voidSetPinValue+0x1fe>
    1dbc:	2e 81       	ldd	r18, Y+6	; 0x06
    1dbe:	3f 81       	ldd	r19, Y+7	; 0x07
    1dc0:	22 30       	cpi	r18, 0x02	; 2
    1dc2:	31 05       	cpc	r19, r1
    1dc4:	71 f1       	breq	.+92     	; 0x1e22 <DIO_voidSetPinValue+0xc8>
    1dc6:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc8:	9f 81       	ldd	r25, Y+7	; 0x07
    1dca:	83 30       	cpi	r24, 0x03	; 3
    1dcc:	91 05       	cpc	r25, r1
    1dce:	e9 f1       	breq	.+122    	; 0x1e4a <DIO_voidSetPinValue+0xf0>
    1dd0:	c3 c0       	rjmp	.+390    	; 0x1f58 <DIO_voidSetPinValue+0x1fe>
            {
                case DIO_PORTA :
                                SET_BIT(PORTA_REG , Copy_u8PinId);
    1dd2:	ab e3       	ldi	r26, 0x3B	; 59
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	eb e3       	ldi	r30, 0x3B	; 59
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	48 2f       	mov	r20, r24
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	02 2e       	mov	r0, r18
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <DIO_voidSetPinValue+0x96>
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	0a 94       	dec	r0
    1df2:	e2 f7       	brpl	.-8      	; 0x1dec <DIO_voidSetPinValue+0x92>
    1df4:	84 2b       	or	r24, r20
    1df6:	8c 93       	st	X, r24
    1df8:	af c0       	rjmp	.+350    	; 0x1f58 <DIO_voidSetPinValue+0x1fe>
                break ; 
                case DIO_PORTB :
                                SET_BIT(PORTB_REG , Copy_u8PinId);
    1dfa:	a8 e3       	ldi	r26, 0x38	; 56
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e8 e3       	ldi	r30, 0x38	; 56
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	48 2f       	mov	r20, r24
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	28 2f       	mov	r18, r24
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	02 2e       	mov	r0, r18
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <DIO_voidSetPinValue+0xbe>
    1e14:	88 0f       	add	r24, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	0a 94       	dec	r0
    1e1a:	e2 f7       	brpl	.-8      	; 0x1e14 <DIO_voidSetPinValue+0xba>
    1e1c:	84 2b       	or	r24, r20
    1e1e:	8c 93       	st	X, r24
    1e20:	9b c0       	rjmp	.+310    	; 0x1f58 <DIO_voidSetPinValue+0x1fe>
                break;
                case DIO_PORTC :
                                SET_BIT(PORTC_REG , Copy_u8PinId);
    1e22:	a5 e3       	ldi	r26, 0x35	; 53
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e5 e3       	ldi	r30, 0x35	; 53
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	48 2f       	mov	r20, r24
    1e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e30:	28 2f       	mov	r18, r24
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	02 2e       	mov	r0, r18
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <DIO_voidSetPinValue+0xe6>
    1e3c:	88 0f       	add	r24, r24
    1e3e:	99 1f       	adc	r25, r25
    1e40:	0a 94       	dec	r0
    1e42:	e2 f7       	brpl	.-8      	; 0x1e3c <DIO_voidSetPinValue+0xe2>
    1e44:	84 2b       	or	r24, r20
    1e46:	8c 93       	st	X, r24
    1e48:	87 c0       	rjmp	.+270    	; 0x1f58 <DIO_voidSetPinValue+0x1fe>
                break ; 
                case DIO_PORTD :
                                SET_BIT(PORTD_REG , Copy_u8PinId);
    1e4a:	a2 e3       	ldi	r26, 0x32	; 50
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	e2 e3       	ldi	r30, 0x32	; 50
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	48 2f       	mov	r20, r24
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	28 2f       	mov	r18, r24
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	02 2e       	mov	r0, r18
    1e62:	02 c0       	rjmp	.+4      	; 0x1e68 <DIO_voidSetPinValue+0x10e>
    1e64:	88 0f       	add	r24, r24
    1e66:	99 1f       	adc	r25, r25
    1e68:	0a 94       	dec	r0
    1e6a:	e2 f7       	brpl	.-8      	; 0x1e64 <DIO_voidSetPinValue+0x10a>
    1e6c:	84 2b       	or	r24, r20
    1e6e:	8c 93       	st	X, r24
    1e70:	73 c0       	rjmp	.+230    	; 0x1f58 <DIO_voidSetPinValue+0x1fe>
                break;
            }
        break;        
        case DIO_LOW :
        switch(Copy_u8PortId)
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	28 2f       	mov	r18, r24
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	3d 83       	std	Y+5, r19	; 0x05
    1e7a:	2c 83       	std	Y+4, r18	; 0x04
    1e7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e80:	81 30       	cpi	r24, 0x01	; 1
    1e82:	91 05       	cpc	r25, r1
    1e84:	59 f1       	breq	.+86     	; 0x1edc <DIO_voidSetPinValue+0x182>
    1e86:	2c 81       	ldd	r18, Y+4	; 0x04
    1e88:	3d 81       	ldd	r19, Y+5	; 0x05
    1e8a:	22 30       	cpi	r18, 0x02	; 2
    1e8c:	31 05       	cpc	r19, r1
    1e8e:	2c f4       	brge	.+10     	; 0x1e9a <DIO_voidSetPinValue+0x140>
    1e90:	8c 81       	ldd	r24, Y+4	; 0x04
    1e92:	9d 81       	ldd	r25, Y+5	; 0x05
    1e94:	00 97       	sbiw	r24, 0x00	; 0
    1e96:	69 f0       	breq	.+26     	; 0x1eb2 <DIO_voidSetPinValue+0x158>
    1e98:	5f c0       	rjmp	.+190    	; 0x1f58 <DIO_voidSetPinValue+0x1fe>
    1e9a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e9c:	3d 81       	ldd	r19, Y+5	; 0x05
    1e9e:	22 30       	cpi	r18, 0x02	; 2
    1ea0:	31 05       	cpc	r19, r1
    1ea2:	89 f1       	breq	.+98     	; 0x1f06 <DIO_voidSetPinValue+0x1ac>
    1ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea8:	83 30       	cpi	r24, 0x03	; 3
    1eaa:	91 05       	cpc	r25, r1
    1eac:	09 f4       	brne	.+2      	; 0x1eb0 <DIO_voidSetPinValue+0x156>
    1eae:	40 c0       	rjmp	.+128    	; 0x1f30 <DIO_voidSetPinValue+0x1d6>
    1eb0:	53 c0       	rjmp	.+166    	; 0x1f58 <DIO_voidSetPinValue+0x1fe>
            {
                case DIO_PORTA :
                                CLR_BIT(PORTA_REG , Copy_u8PinId);
    1eb2:	ab e3       	ldi	r26, 0x3B	; 59
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	eb e3       	ldi	r30, 0x3B	; 59
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	48 2f       	mov	r20, r24
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	02 2e       	mov	r0, r18
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <DIO_voidSetPinValue+0x176>
    1ecc:	88 0f       	add	r24, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	0a 94       	dec	r0
    1ed2:	e2 f7       	brpl	.-8      	; 0x1ecc <DIO_voidSetPinValue+0x172>
    1ed4:	80 95       	com	r24
    1ed6:	84 23       	and	r24, r20
    1ed8:	8c 93       	st	X, r24
    1eda:	3e c0       	rjmp	.+124    	; 0x1f58 <DIO_voidSetPinValue+0x1fe>
                break ; 
                case DIO_PORTB :
                                CLR_BIT(PORTB_REG , Copy_u8PinId);
    1edc:	a8 e3       	ldi	r26, 0x38	; 56
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	e8 e3       	ldi	r30, 0x38	; 56
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	48 2f       	mov	r20, r24
    1ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	02 2e       	mov	r0, r18
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <DIO_voidSetPinValue+0x1a0>
    1ef6:	88 0f       	add	r24, r24
    1ef8:	99 1f       	adc	r25, r25
    1efa:	0a 94       	dec	r0
    1efc:	e2 f7       	brpl	.-8      	; 0x1ef6 <DIO_voidSetPinValue+0x19c>
    1efe:	80 95       	com	r24
    1f00:	84 23       	and	r24, r20
    1f02:	8c 93       	st	X, r24
    1f04:	29 c0       	rjmp	.+82     	; 0x1f58 <DIO_voidSetPinValue+0x1fe>
                break;
                case DIO_PORTC :
                                CLR_BIT(PORTC_REG , Copy_u8PinId);
    1f06:	a5 e3       	ldi	r26, 0x35	; 53
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e5 e3       	ldi	r30, 0x35	; 53
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	48 2f       	mov	r20, r24
    1f12:	8a 81       	ldd	r24, Y+2	; 0x02
    1f14:	28 2f       	mov	r18, r24
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	02 2e       	mov	r0, r18
    1f1e:	02 c0       	rjmp	.+4      	; 0x1f24 <DIO_voidSetPinValue+0x1ca>
    1f20:	88 0f       	add	r24, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	0a 94       	dec	r0
    1f26:	e2 f7       	brpl	.-8      	; 0x1f20 <DIO_voidSetPinValue+0x1c6>
    1f28:	80 95       	com	r24
    1f2a:	84 23       	and	r24, r20
    1f2c:	8c 93       	st	X, r24
    1f2e:	14 c0       	rjmp	.+40     	; 0x1f58 <DIO_voidSetPinValue+0x1fe>
                break ; 
                case DIO_PORTD :
                                CLR_BIT(PORTD_REG , Copy_u8PinId);
    1f30:	a2 e3       	ldi	r26, 0x32	; 50
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e2 e3       	ldi	r30, 0x32	; 50
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	48 2f       	mov	r20, r24
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	28 2f       	mov	r18, r24
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	02 2e       	mov	r0, r18
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <DIO_voidSetPinValue+0x1f4>
    1f4a:	88 0f       	add	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	0a 94       	dec	r0
    1f50:	e2 f7       	brpl	.-8      	; 0x1f4a <DIO_voidSetPinValue+0x1f0>
    1f52:	80 95       	com	r24
    1f54:	84 23       	and	r24, r20
    1f56:	8c 93       	st	X, r24
                break;
            }
        break ; 
    }

}
    1f58:	29 96       	adiw	r28, 0x09	; 9
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	f8 94       	cli
    1f5e:	de bf       	out	0x3e, r29	; 62
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	cd bf       	out	0x3d, r28	; 61
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	08 95       	ret

00001f6a <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue        (u8 Copy_u8PortId , u8 Copy_u8PinId )
{
    1f6a:	df 93       	push	r29
    1f6c:	cf 93       	push	r28
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <DIO_u8GetPinValue+0x6>
    1f70:	00 d0       	rcall	.+0      	; 0x1f72 <DIO_u8GetPinValue+0x8>
    1f72:	0f 92       	push	r0
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	8a 83       	std	Y+2, r24	; 0x02
    1f7a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnedValue = 255 ; 
    1f7c:	8f ef       	ldi	r24, 0xFF	; 255
    1f7e:	89 83       	std	Y+1, r24	; 0x01

    switch(Copy_u8PortId)
    1f80:	8a 81       	ldd	r24, Y+2	; 0x02
    1f82:	28 2f       	mov	r18, r24
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	3d 83       	std	Y+5, r19	; 0x05
    1f88:	2c 83       	std	Y+4, r18	; 0x04
    1f8a:	4c 81       	ldd	r20, Y+4	; 0x04
    1f8c:	5d 81       	ldd	r21, Y+5	; 0x05
    1f8e:	41 30       	cpi	r20, 0x01	; 1
    1f90:	51 05       	cpc	r21, r1
    1f92:	41 f1       	breq	.+80     	; 0x1fe4 <DIO_u8GetPinValue+0x7a>
    1f94:	8c 81       	ldd	r24, Y+4	; 0x04
    1f96:	9d 81       	ldd	r25, Y+5	; 0x05
    1f98:	82 30       	cpi	r24, 0x02	; 2
    1f9a:	91 05       	cpc	r25, r1
    1f9c:	34 f4       	brge	.+12     	; 0x1faa <DIO_u8GetPinValue+0x40>
    1f9e:	2c 81       	ldd	r18, Y+4	; 0x04
    1fa0:	3d 81       	ldd	r19, Y+5	; 0x05
    1fa2:	21 15       	cp	r18, r1
    1fa4:	31 05       	cpc	r19, r1
    1fa6:	61 f0       	breq	.+24     	; 0x1fc0 <DIO_u8GetPinValue+0x56>
    1fa8:	52 c0       	rjmp	.+164    	; 0x204e <DIO_u8GetPinValue+0xe4>
    1faa:	4c 81       	ldd	r20, Y+4	; 0x04
    1fac:	5d 81       	ldd	r21, Y+5	; 0x05
    1fae:	42 30       	cpi	r20, 0x02	; 2
    1fb0:	51 05       	cpc	r21, r1
    1fb2:	51 f1       	breq	.+84     	; 0x2008 <DIO_u8GetPinValue+0x9e>
    1fb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb8:	83 30       	cpi	r24, 0x03	; 3
    1fba:	91 05       	cpc	r25, r1
    1fbc:	b9 f1       	breq	.+110    	; 0x202c <DIO_u8GetPinValue+0xc2>
    1fbe:	47 c0       	rjmp	.+142    	; 0x204e <DIO_u8GetPinValue+0xe4>
    {
        case DIO_PORTA :
            Local_u8ReturnedValue = GET_BIT(PINA_REG , Copy_u8PinId);
    1fc0:	e9 e3       	ldi	r30, 0x39	; 57
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	28 2f       	mov	r18, r24
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	8b 81       	ldd	r24, Y+3	; 0x03
    1fcc:	88 2f       	mov	r24, r24
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	a9 01       	movw	r20, r18
    1fd2:	02 c0       	rjmp	.+4      	; 0x1fd8 <DIO_u8GetPinValue+0x6e>
    1fd4:	55 95       	asr	r21
    1fd6:	47 95       	ror	r20
    1fd8:	8a 95       	dec	r24
    1fda:	e2 f7       	brpl	.-8      	; 0x1fd4 <DIO_u8GetPinValue+0x6a>
    1fdc:	ca 01       	movw	r24, r20
    1fde:	81 70       	andi	r24, 0x01	; 1
    1fe0:	89 83       	std	Y+1, r24	; 0x01
    1fe2:	35 c0       	rjmp	.+106    	; 0x204e <DIO_u8GetPinValue+0xe4>
        break ;
        case DIO_PORTB :
            Local_u8ReturnedValue = GET_BIT(PINB_REG , Copy_u8PinId);
    1fe4:	e6 e3       	ldi	r30, 0x36	; 54
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	28 2f       	mov	r18, r24
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	88 2f       	mov	r24, r24
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	a9 01       	movw	r20, r18
    1ff6:	02 c0       	rjmp	.+4      	; 0x1ffc <DIO_u8GetPinValue+0x92>
    1ff8:	55 95       	asr	r21
    1ffa:	47 95       	ror	r20
    1ffc:	8a 95       	dec	r24
    1ffe:	e2 f7       	brpl	.-8      	; 0x1ff8 <DIO_u8GetPinValue+0x8e>
    2000:	ca 01       	movw	r24, r20
    2002:	81 70       	andi	r24, 0x01	; 1
    2004:	89 83       	std	Y+1, r24	; 0x01
    2006:	23 c0       	rjmp	.+70     	; 0x204e <DIO_u8GetPinValue+0xe4>
        break ;
        case DIO_PORTC :
            Local_u8ReturnedValue = GET_BIT(PINC_REG , Copy_u8PinId);
    2008:	e3 e3       	ldi	r30, 0x33	; 51
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	8b 81       	ldd	r24, Y+3	; 0x03
    2014:	88 2f       	mov	r24, r24
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	a9 01       	movw	r20, r18
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <DIO_u8GetPinValue+0xb6>
    201c:	55 95       	asr	r21
    201e:	47 95       	ror	r20
    2020:	8a 95       	dec	r24
    2022:	e2 f7       	brpl	.-8      	; 0x201c <DIO_u8GetPinValue+0xb2>
    2024:	ca 01       	movw	r24, r20
    2026:	81 70       	andi	r24, 0x01	; 1
    2028:	89 83       	std	Y+1, r24	; 0x01
    202a:	11 c0       	rjmp	.+34     	; 0x204e <DIO_u8GetPinValue+0xe4>
        break ; 
        case DIO_PORTD : 
            Local_u8ReturnedValue = GET_BIT(PIND_REG , Copy_u8PinId);
    202c:	e0 e3       	ldi	r30, 0x30	; 48
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	28 2f       	mov	r18, r24
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	88 2f       	mov	r24, r24
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	a9 01       	movw	r20, r18
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <DIO_u8GetPinValue+0xda>
    2040:	55 95       	asr	r21
    2042:	47 95       	ror	r20
    2044:	8a 95       	dec	r24
    2046:	e2 f7       	brpl	.-8      	; 0x2040 <DIO_u8GetPinValue+0xd6>
    2048:	ca 01       	movw	r24, r20
    204a:	81 70       	andi	r24, 0x01	; 1
    204c:	89 83       	std	Y+1, r24	; 0x01
        break ;
    }



    return Local_u8ReturnedValue ; 
    204e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	08 95       	ret

00002060 <DIO_voidSetPortValue>:
void DIO_voidSetPortValue(u8 Copy_u8PortId, u8 Copy_u8Value)
{
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	00 d0       	rcall	.+0      	; 0x2066 <DIO_voidSetPortValue+0x6>
    2066:	00 d0       	rcall	.+0      	; 0x2068 <DIO_voidSetPortValue+0x8>
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	89 83       	std	Y+1, r24	; 0x01
    206e:	6a 83       	std	Y+2, r22	; 0x02
    switch(Copy_u8PortId)
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	28 2f       	mov	r18, r24
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	3c 83       	std	Y+4, r19	; 0x04
    2078:	2b 83       	std	Y+3, r18	; 0x03
    207a:	8b 81       	ldd	r24, Y+3	; 0x03
    207c:	9c 81       	ldd	r25, Y+4	; 0x04
    207e:	81 30       	cpi	r24, 0x01	; 1
    2080:	91 05       	cpc	r25, r1
    2082:	d1 f0       	breq	.+52     	; 0x20b8 <DIO_voidSetPortValue+0x58>
    2084:	2b 81       	ldd	r18, Y+3	; 0x03
    2086:	3c 81       	ldd	r19, Y+4	; 0x04
    2088:	22 30       	cpi	r18, 0x02	; 2
    208a:	31 05       	cpc	r19, r1
    208c:	2c f4       	brge	.+10     	; 0x2098 <DIO_voidSetPortValue+0x38>
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	9c 81       	ldd	r25, Y+4	; 0x04
    2092:	00 97       	sbiw	r24, 0x00	; 0
    2094:	61 f0       	breq	.+24     	; 0x20ae <DIO_voidSetPortValue+0x4e>
    2096:	1e c0       	rjmp	.+60     	; 0x20d4 <DIO_voidSetPortValue+0x74>
    2098:	2b 81       	ldd	r18, Y+3	; 0x03
    209a:	3c 81       	ldd	r19, Y+4	; 0x04
    209c:	22 30       	cpi	r18, 0x02	; 2
    209e:	31 05       	cpc	r19, r1
    20a0:	81 f0       	breq	.+32     	; 0x20c2 <DIO_voidSetPortValue+0x62>
    20a2:	8b 81       	ldd	r24, Y+3	; 0x03
    20a4:	9c 81       	ldd	r25, Y+4	; 0x04
    20a6:	83 30       	cpi	r24, 0x03	; 3
    20a8:	91 05       	cpc	r25, r1
    20aa:	81 f0       	breq	.+32     	; 0x20cc <DIO_voidSetPortValue+0x6c>
    20ac:	13 c0       	rjmp	.+38     	; 0x20d4 <DIO_voidSetPortValue+0x74>
    {
        case DIO_PORTA: PORTA_REG = Copy_u8Value;
    20ae:	eb e3       	ldi	r30, 0x3B	; 59
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	8a 81       	ldd	r24, Y+2	; 0x02
    20b4:	80 83       	st	Z, r24
    20b6:	0e c0       	rjmp	.+28     	; 0x20d4 <DIO_voidSetPortValue+0x74>
                    break;

        case DIO_PORTB: PORTB_REG = Copy_u8Value;
    20b8:	e8 e3       	ldi	r30, 0x38	; 56
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	80 83       	st	Z, r24
    20c0:	09 c0       	rjmp	.+18     	; 0x20d4 <DIO_voidSetPortValue+0x74>
                    break;

        case DIO_PORTC: PORTC_REG = Copy_u8Value;
    20c2:	e5 e3       	ldi	r30, 0x35	; 53
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	80 83       	st	Z, r24
    20ca:	04 c0       	rjmp	.+8      	; 0x20d4 <DIO_voidSetPortValue+0x74>
                    break;

        case DIO_PORTD: PORTD_REG = Copy_u8Value;
    20cc:	e2 e3       	ldi	r30, 0x32	; 50
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	8a 81       	ldd	r24, Y+2	; 0x02
    20d2:	80 83       	st	Z, r24
                    break;
        default:
                    break;
    }
}
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 Copy_u8PortId, u8 Copy_u8Direction)
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
    20ea:	28 97       	sbiw	r28, 0x08	; 8
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	f8 94       	cli
    20f0:	de bf       	out	0x3e, r29	; 62
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	cd bf       	out	0x3d, r28	; 61
    20f6:	89 83       	std	Y+1, r24	; 0x01
    20f8:	6a 83       	std	Y+2, r22	; 0x02
    switch(Copy_u8Direction)
    20fa:	8a 81       	ldd	r24, Y+2	; 0x02
    20fc:	28 2f       	mov	r18, r24
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	38 87       	std	Y+8, r19	; 0x08
    2102:	2f 83       	std	Y+7, r18	; 0x07
    2104:	8f 81       	ldd	r24, Y+7	; 0x07
    2106:	98 85       	ldd	r25, Y+8	; 0x08
    2108:	00 97       	sbiw	r24, 0x00	; 0
    210a:	c9 f1       	breq	.+114    	; 0x217e <DIO_voidSetPortDirection+0x9c>
    210c:	2f 81       	ldd	r18, Y+7	; 0x07
    210e:	38 85       	ldd	r19, Y+8	; 0x08
    2110:	21 30       	cpi	r18, 0x01	; 1
    2112:	31 05       	cpc	r19, r1
    2114:	09 f0       	breq	.+2      	; 0x2118 <DIO_voidSetPortDirection+0x36>
    2116:	61 c0       	rjmp	.+194    	; 0x21da <DIO_voidSetPortDirection+0xf8>
    {
        case DIO_OUTPUT:
                        switch(Copy_u8PortId)
    2118:	89 81       	ldd	r24, Y+1	; 0x01
    211a:	28 2f       	mov	r18, r24
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	3e 83       	std	Y+6, r19	; 0x06
    2120:	2d 83       	std	Y+5, r18	; 0x05
    2122:	8d 81       	ldd	r24, Y+5	; 0x05
    2124:	9e 81       	ldd	r25, Y+6	; 0x06
    2126:	81 30       	cpi	r24, 0x01	; 1
    2128:	91 05       	cpc	r25, r1
    212a:	d1 f0       	breq	.+52     	; 0x2160 <DIO_voidSetPortDirection+0x7e>
    212c:	2d 81       	ldd	r18, Y+5	; 0x05
    212e:	3e 81       	ldd	r19, Y+6	; 0x06
    2130:	22 30       	cpi	r18, 0x02	; 2
    2132:	31 05       	cpc	r19, r1
    2134:	2c f4       	brge	.+10     	; 0x2140 <DIO_voidSetPortDirection+0x5e>
    2136:	8d 81       	ldd	r24, Y+5	; 0x05
    2138:	9e 81       	ldd	r25, Y+6	; 0x06
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	61 f0       	breq	.+24     	; 0x2156 <DIO_voidSetPortDirection+0x74>
    213e:	4d c0       	rjmp	.+154    	; 0x21da <DIO_voidSetPortDirection+0xf8>
    2140:	2d 81       	ldd	r18, Y+5	; 0x05
    2142:	3e 81       	ldd	r19, Y+6	; 0x06
    2144:	22 30       	cpi	r18, 0x02	; 2
    2146:	31 05       	cpc	r19, r1
    2148:	81 f0       	breq	.+32     	; 0x216a <DIO_voidSetPortDirection+0x88>
    214a:	8d 81       	ldd	r24, Y+5	; 0x05
    214c:	9e 81       	ldd	r25, Y+6	; 0x06
    214e:	83 30       	cpi	r24, 0x03	; 3
    2150:	91 05       	cpc	r25, r1
    2152:	81 f0       	breq	.+32     	; 0x2174 <DIO_voidSetPortDirection+0x92>
    2154:	42 c0       	rjmp	.+132    	; 0x21da <DIO_voidSetPortDirection+0xf8>
                        {
                            case DIO_PORTA: DDRA_REG = 0xFF;
    2156:	ea e3       	ldi	r30, 0x3A	; 58
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	8f ef       	ldi	r24, 0xFF	; 255
    215c:	80 83       	st	Z, r24
    215e:	3d c0       	rjmp	.+122    	; 0x21da <DIO_voidSetPortDirection+0xf8>
                                        break;

                            case DIO_PORTB: DDRB_REG = 0xFF;
    2160:	e7 e3       	ldi	r30, 0x37	; 55
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	8f ef       	ldi	r24, 0xFF	; 255
    2166:	80 83       	st	Z, r24
    2168:	38 c0       	rjmp	.+112    	; 0x21da <DIO_voidSetPortDirection+0xf8>
                                        break;

                            case DIO_PORTC: DDRC_REG = 0xFF;
    216a:	e4 e3       	ldi	r30, 0x34	; 52
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	8f ef       	ldi	r24, 0xFF	; 255
    2170:	80 83       	st	Z, r24
    2172:	33 c0       	rjmp	.+102    	; 0x21da <DIO_voidSetPortDirection+0xf8>
                                        break;

                            case DIO_PORTD: DDRD_REG = 0xFF;
    2174:	e1 e3       	ldi	r30, 0x31	; 49
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	8f ef       	ldi	r24, 0xFF	; 255
    217a:	80 83       	st	Z, r24
    217c:	2e c0       	rjmp	.+92     	; 0x21da <DIO_voidSetPortDirection+0xf8>
                                        break;
                            default:
                                        break;
                        }
                        break;
        case DIO_INPUT:     switch(Copy_u8PortId)
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	28 2f       	mov	r18, r24
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	3c 83       	std	Y+4, r19	; 0x04
    2186:	2b 83       	std	Y+3, r18	; 0x03
    2188:	8b 81       	ldd	r24, Y+3	; 0x03
    218a:	9c 81       	ldd	r25, Y+4	; 0x04
    218c:	81 30       	cpi	r24, 0x01	; 1
    218e:	91 05       	cpc	r25, r1
    2190:	c9 f0       	breq	.+50     	; 0x21c4 <DIO_voidSetPortDirection+0xe2>
    2192:	2b 81       	ldd	r18, Y+3	; 0x03
    2194:	3c 81       	ldd	r19, Y+4	; 0x04
    2196:	22 30       	cpi	r18, 0x02	; 2
    2198:	31 05       	cpc	r19, r1
    219a:	2c f4       	brge	.+10     	; 0x21a6 <DIO_voidSetPortDirection+0xc4>
    219c:	8b 81       	ldd	r24, Y+3	; 0x03
    219e:	9c 81       	ldd	r25, Y+4	; 0x04
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	61 f0       	breq	.+24     	; 0x21bc <DIO_voidSetPortDirection+0xda>
    21a4:	1a c0       	rjmp	.+52     	; 0x21da <DIO_voidSetPortDirection+0xf8>
    21a6:	2b 81       	ldd	r18, Y+3	; 0x03
    21a8:	3c 81       	ldd	r19, Y+4	; 0x04
    21aa:	22 30       	cpi	r18, 0x02	; 2
    21ac:	31 05       	cpc	r19, r1
    21ae:	71 f0       	breq	.+28     	; 0x21cc <DIO_voidSetPortDirection+0xea>
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	9c 81       	ldd	r25, Y+4	; 0x04
    21b4:	83 30       	cpi	r24, 0x03	; 3
    21b6:	91 05       	cpc	r25, r1
    21b8:	69 f0       	breq	.+26     	; 0x21d4 <DIO_voidSetPortDirection+0xf2>
    21ba:	0f c0       	rjmp	.+30     	; 0x21da <DIO_voidSetPortDirection+0xf8>
                        {
                            case DIO_PORTA: DDRA_REG = 0x00;
    21bc:	ea e3       	ldi	r30, 0x3A	; 58
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	10 82       	st	Z, r1
    21c2:	0b c0       	rjmp	.+22     	; 0x21da <DIO_voidSetPortDirection+0xf8>
                                        break;

                            case DIO_PORTB: DDRB_REG = 0x00;
    21c4:	e7 e3       	ldi	r30, 0x37	; 55
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	10 82       	st	Z, r1
    21ca:	07 c0       	rjmp	.+14     	; 0x21da <DIO_voidSetPortDirection+0xf8>
                                        break;

                            case DIO_PORTC: DDRC_REG = 0x00;
    21cc:	e4 e3       	ldi	r30, 0x34	; 52
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	10 82       	st	Z, r1
    21d2:	03 c0       	rjmp	.+6      	; 0x21da <DIO_voidSetPortDirection+0xf8>
                                        break;

                            case DIO_PORTD: DDRD_REG = 0x00;
    21d4:	e1 e3       	ldi	r30, 0x31	; 49
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	10 82       	st	Z, r1
                        }
                        break;
        default:
                        break;
    }
}
    21da:	28 96       	adiw	r28, 0x08	; 8
    21dc:	0f b6       	in	r0, 0x3f	; 63
    21de:	f8 94       	cli
    21e0:	de bf       	out	0x3e, r29	; 62
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	cd bf       	out	0x3d, r28	; 61
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	08 95       	ret

000021ec <DIO_u8GetPortValue>:

u8   DIO_u8GetPortValue(u8 Copy_u8PortId)
{
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	00 d0       	rcall	.+0      	; 0x21f2 <DIO_u8GetPortValue+0x6>
    21f2:	00 d0       	rcall	.+0      	; 0x21f4 <DIO_u8GetPortValue+0x8>
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    21f8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Var;
    switch(Copy_u8PortId)
    21fa:	8a 81       	ldd	r24, Y+2	; 0x02
    21fc:	28 2f       	mov	r18, r24
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	3c 83       	std	Y+4, r19	; 0x04
    2202:	2b 83       	std	Y+3, r18	; 0x03
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	9c 81       	ldd	r25, Y+4	; 0x04
    2208:	81 30       	cpi	r24, 0x01	; 1
    220a:	91 05       	cpc	r25, r1
    220c:	d1 f0       	breq	.+52     	; 0x2242 <DIO_u8GetPortValue+0x56>
    220e:	2b 81       	ldd	r18, Y+3	; 0x03
    2210:	3c 81       	ldd	r19, Y+4	; 0x04
    2212:	22 30       	cpi	r18, 0x02	; 2
    2214:	31 05       	cpc	r19, r1
    2216:	2c f4       	brge	.+10     	; 0x2222 <DIO_u8GetPortValue+0x36>
    2218:	8b 81       	ldd	r24, Y+3	; 0x03
    221a:	9c 81       	ldd	r25, Y+4	; 0x04
    221c:	00 97       	sbiw	r24, 0x00	; 0
    221e:	61 f0       	breq	.+24     	; 0x2238 <DIO_u8GetPortValue+0x4c>
    2220:	1e c0       	rjmp	.+60     	; 0x225e <DIO_u8GetPortValue+0x72>
    2222:	2b 81       	ldd	r18, Y+3	; 0x03
    2224:	3c 81       	ldd	r19, Y+4	; 0x04
    2226:	22 30       	cpi	r18, 0x02	; 2
    2228:	31 05       	cpc	r19, r1
    222a:	81 f0       	breq	.+32     	; 0x224c <DIO_u8GetPortValue+0x60>
    222c:	8b 81       	ldd	r24, Y+3	; 0x03
    222e:	9c 81       	ldd	r25, Y+4	; 0x04
    2230:	83 30       	cpi	r24, 0x03	; 3
    2232:	91 05       	cpc	r25, r1
    2234:	81 f0       	breq	.+32     	; 0x2256 <DIO_u8GetPortValue+0x6a>
    2236:	13 c0       	rjmp	.+38     	; 0x225e <DIO_u8GetPortValue+0x72>
    {
        case DIO_PORTA: Local_u8Var = PINA_REG;
    2238:	e9 e3       	ldi	r30, 0x39	; 57
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	89 83       	std	Y+1, r24	; 0x01
    2240:	0e c0       	rjmp	.+28     	; 0x225e <DIO_u8GetPortValue+0x72>
                    break;

        case DIO_PORTB: Local_u8Var = PINB_REG;
    2242:	e6 e3       	ldi	r30, 0x36	; 54
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	89 83       	std	Y+1, r24	; 0x01
    224a:	09 c0       	rjmp	.+18     	; 0x225e <DIO_u8GetPortValue+0x72>
                    break;

        case DIO_PORTC: Local_u8Var = PINC_REG;
    224c:	e3 e3       	ldi	r30, 0x33	; 51
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	80 81       	ld	r24, Z
    2252:	89 83       	std	Y+1, r24	; 0x01
    2254:	04 c0       	rjmp	.+8      	; 0x225e <DIO_u8GetPortValue+0x72>
                    break;

        case DIO_PORTD: Local_u8Var = PIND_REG;
    2256:	e0 e3       	ldi	r30, 0x30	; 48
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 81       	ld	r24, Z
    225c:	89 83       	std	Y+1, r24	; 0x01
                    break;
        default:
                    break;
    }
    return Local_u8Var;
    225e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	0f 90       	pop	r0
    2266:	0f 90       	pop	r0
    2268:	cf 91       	pop	r28
    226a:	df 91       	pop	r29
    226c:	08 95       	ret

0000226e <SSD_voidInit>:
#include "SSD_private.h"
#include "SSD_config.h"


void SSD_voidInit			(SSD_t * Copy_pstructSSD)
{
    226e:	df 93       	push	r29
    2270:	cf 93       	push	r28
    2272:	00 d0       	rcall	.+0      	; 0x2274 <SSD_voidInit+0x6>
    2274:	00 d0       	rcall	.+0      	; 0x2276 <SSD_voidInit+0x8>
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
    227a:	9a 83       	std	Y+2, r25	; 0x02
    227c:	89 83       	std	Y+1, r24	; 0x01
	/* Port - > OUTPUT*/
	DIO_voidSetPortDirection(Copy_pstructSSD -> Port , DIO_OUTPUT );
    227e:	e9 81       	ldd	r30, Y+1	; 0x01
    2280:	fa 81       	ldd	r31, Y+2	; 0x02
    2282:	80 81       	ld	r24, Z
    2284:	61 e0       	ldi	r22, 0x01	; 1
    2286:	0e 94 71 10 	call	0x20e2	; 0x20e2 <DIO_voidSetPortDirection>
	/*Disable the ssd*/
	switch(Copy_pstructSSD->CommonState)
    228a:	e9 81       	ldd	r30, Y+1	; 0x01
    228c:	fa 81       	ldd	r31, Y+2	; 0x02
    228e:	81 81       	ldd	r24, Z+1	; 0x01
    2290:	28 2f       	mov	r18, r24
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	3c 83       	std	Y+4, r19	; 0x04
    2296:	2b 83       	std	Y+3, r18	; 0x03
    2298:	8b 81       	ldd	r24, Y+3	; 0x03
    229a:	9c 81       	ldd	r25, Y+4	; 0x04
    229c:	00 97       	sbiw	r24, 0x00	; 0
    229e:	61 f0       	breq	.+24     	; 0x22b8 <SSD_voidInit+0x4a>
    22a0:	2b 81       	ldd	r18, Y+3	; 0x03
    22a2:	3c 81       	ldd	r19, Y+4	; 0x04
    22a4:	21 30       	cpi	r18, 0x01	; 1
    22a6:	31 05       	cpc	r19, r1
    22a8:	69 f4       	brne	.+26     	; 0x22c4 <SSD_voidInit+0x56>
	{
	case SSD_COMMON_ANODE:
		DIO_voidSetPortValue(Copy_pstructSSD->Port , 0xff );
    22aa:	e9 81       	ldd	r30, Y+1	; 0x01
    22ac:	fa 81       	ldd	r31, Y+2	; 0x02
    22ae:	80 81       	ld	r24, Z
    22b0:	6f ef       	ldi	r22, 0xFF	; 255
    22b2:	0e 94 30 10 	call	0x2060	; 0x2060 <DIO_voidSetPortValue>
    22b6:	06 c0       	rjmp	.+12     	; 0x22c4 <SSD_voidInit+0x56>
		break ;
	case SSD_COMMON_CATHODE :
		DIO_voidSetPortValue(Copy_pstructSSD->Port , 0x00 );
    22b8:	e9 81       	ldd	r30, Y+1	; 0x01
    22ba:	fa 81       	ldd	r31, Y+2	; 0x02
    22bc:	80 81       	ld	r24, Z
    22be:	60 e0       	ldi	r22, 0x00	; 0
    22c0:	0e 94 30 10 	call	0x2060	; 0x2060 <DIO_voidSetPortValue>
		break ;
	default :
		break;
	}

}
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
    22cc:	cf 91       	pop	r28
    22ce:	df 91       	pop	r29
    22d0:	08 95       	ret

000022d2 <SSD_voidEnable>:
void SSD_voidEnable			(SSD_t * Copy_pstructSSD ,u8 Copy_u8Number )
{
    22d2:	df 93       	push	r29
    22d4:	cf 93       	push	r28
    22d6:	00 d0       	rcall	.+0      	; 0x22d8 <SSD_voidEnable+0x6>
    22d8:	00 d0       	rcall	.+0      	; 0x22da <SSD_voidEnable+0x8>
    22da:	0f 92       	push	r0
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62
    22e0:	9a 83       	std	Y+2, r25	; 0x02
    22e2:	89 83       	std	Y+1, r24	; 0x01
    22e4:	6b 83       	std	Y+3, r22	; 0x03
	switch( Copy_pstructSSD -> CommonState)
    22e6:	e9 81       	ldd	r30, Y+1	; 0x01
    22e8:	fa 81       	ldd	r31, Y+2	; 0x02
    22ea:	81 81       	ldd	r24, Z+1	; 0x01
    22ec:	28 2f       	mov	r18, r24
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	3d 83       	std	Y+5, r19	; 0x05
    22f2:	2c 83       	std	Y+4, r18	; 0x04
    22f4:	8c 81       	ldd	r24, Y+4	; 0x04
    22f6:	9d 81       	ldd	r25, Y+5	; 0x05
    22f8:	00 97       	sbiw	r24, 0x00	; 0
    22fa:	31 f0       	breq	.+12     	; 0x2308 <SSD_voidEnable+0x36>
    22fc:	2c 81       	ldd	r18, Y+4	; 0x04
    22fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2300:	21 30       	cpi	r18, 0x01	; 1
    2302:	31 05       	cpc	r19, r1
    2304:	81 f0       	breq	.+32     	; 0x2326 <SSD_voidEnable+0x54>
    2306:	1f c0       	rjmp	.+62     	; 0x2346 <SSD_voidEnable+0x74>
	{
	case SSD_COMMON_CATHODE :
		DIO_voidSetPortValue(Copy_pstructSSD -> Port ,ArrayNumbers[Copy_u8Number] );
    2308:	e9 81       	ldd	r30, Y+1	; 0x01
    230a:	fa 81       	ldd	r31, Y+2	; 0x02
    230c:	20 81       	ld	r18, Z
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	88 2f       	mov	r24, r24
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	fc 01       	movw	r30, r24
    2316:	e0 58       	subi	r30, 0x80	; 128
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	90 81       	ld	r25, Z
    231c:	82 2f       	mov	r24, r18
    231e:	69 2f       	mov	r22, r25
    2320:	0e 94 30 10 	call	0x2060	; 0x2060 <DIO_voidSetPortValue>
    2324:	10 c0       	rjmp	.+32     	; 0x2346 <SSD_voidEnable+0x74>
		break ;
	case SSD_COMMON_ANODE :
		DIO_voidSetPortValue(Copy_pstructSSD -> Port , ~ArrayNumbers[Copy_u8Number] );
    2326:	e9 81       	ldd	r30, Y+1	; 0x01
    2328:	fa 81       	ldd	r31, Y+2	; 0x02
    232a:	20 81       	ld	r18, Z
    232c:	8b 81       	ldd	r24, Y+3	; 0x03
    232e:	88 2f       	mov	r24, r24
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	fc 01       	movw	r30, r24
    2334:	e0 58       	subi	r30, 0x80	; 128
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	80 81       	ld	r24, Z
    233a:	98 2f       	mov	r25, r24
    233c:	90 95       	com	r25
    233e:	82 2f       	mov	r24, r18
    2340:	69 2f       	mov	r22, r25
    2342:	0e 94 30 10 	call	0x2060	; 0x2060 <DIO_voidSetPortValue>
		break;
	}
}
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	08 95       	ret

00002356 <SSD_voidDisable>:
void SSD_voidDisable		(SSD_t * Copy_pstructSSD)
{
    2356:	df 93       	push	r29
    2358:	cf 93       	push	r28
    235a:	00 d0       	rcall	.+0      	; 0x235c <SSD_voidDisable+0x6>
    235c:	00 d0       	rcall	.+0      	; 0x235e <SSD_voidDisable+0x8>
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
    2362:	9a 83       	std	Y+2, r25	; 0x02
    2364:	89 83       	std	Y+1, r24	; 0x01
	/*Disable the ssd*/
		switch(Copy_pstructSSD->CommonState)
    2366:	e9 81       	ldd	r30, Y+1	; 0x01
    2368:	fa 81       	ldd	r31, Y+2	; 0x02
    236a:	81 81       	ldd	r24, Z+1	; 0x01
    236c:	28 2f       	mov	r18, r24
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	3c 83       	std	Y+4, r19	; 0x04
    2372:	2b 83       	std	Y+3, r18	; 0x03
    2374:	8b 81       	ldd	r24, Y+3	; 0x03
    2376:	9c 81       	ldd	r25, Y+4	; 0x04
    2378:	00 97       	sbiw	r24, 0x00	; 0
    237a:	61 f0       	breq	.+24     	; 0x2394 <SSD_voidDisable+0x3e>
    237c:	2b 81       	ldd	r18, Y+3	; 0x03
    237e:	3c 81       	ldd	r19, Y+4	; 0x04
    2380:	21 30       	cpi	r18, 0x01	; 1
    2382:	31 05       	cpc	r19, r1
    2384:	69 f4       	brne	.+26     	; 0x23a0 <SSD_voidDisable+0x4a>
		{
		case SSD_COMMON_ANODE:
			DIO_voidSetPortValue(Copy_pstructSSD->Port , 0xff );
    2386:	e9 81       	ldd	r30, Y+1	; 0x01
    2388:	fa 81       	ldd	r31, Y+2	; 0x02
    238a:	80 81       	ld	r24, Z
    238c:	6f ef       	ldi	r22, 0xFF	; 255
    238e:	0e 94 30 10 	call	0x2060	; 0x2060 <DIO_voidSetPortValue>
    2392:	06 c0       	rjmp	.+12     	; 0x23a0 <SSD_voidDisable+0x4a>
			break ;
		case SSD_COMMON_CATHODE :
			DIO_voidSetPortValue(Copy_pstructSSD->Port , 0x00 );
    2394:	e9 81       	ldd	r30, Y+1	; 0x01
    2396:	fa 81       	ldd	r31, Y+2	; 0x02
    2398:	80 81       	ld	r24, Z
    239a:	60 e0       	ldi	r22, 0x00	; 0
    239c:	0e 94 30 10 	call	0x2060	; 0x2060 <DIO_voidSetPortValue>
			break ;
		default :
			break;
		}
}
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	0f 90       	pop	r0
    23a8:	cf 91       	pop	r28
    23aa:	df 91       	pop	r29
    23ac:	08 95       	ret

000023ae <LED_voidInit>:
#include "LED_interface.h"



void LED_voidInit		(LED_t * Copy_pstructLed )
{
    23ae:	df 93       	push	r29
    23b0:	cf 93       	push	r28
    23b2:	00 d0       	rcall	.+0      	; 0x23b4 <LED_voidInit+0x6>
    23b4:	00 d0       	rcall	.+0      	; 0x23b6 <LED_voidInit+0x8>
    23b6:	cd b7       	in	r28, 0x3d	; 61
    23b8:	de b7       	in	r29, 0x3e	; 62
    23ba:	9a 83       	std	Y+2, r25	; 0x02
    23bc:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinDirection(Copy_pstructLed->Port , Copy_pstructLed->Pin , DIO_OUTPUT);
    23be:	e9 81       	ldd	r30, Y+1	; 0x01
    23c0:	fa 81       	ldd	r31, Y+2	; 0x02
    23c2:	80 81       	ld	r24, Z
    23c4:	e9 81       	ldd	r30, Y+1	; 0x01
    23c6:	fa 81       	ldd	r31, Y+2	; 0x02
    23c8:	91 81       	ldd	r25, Z+1	; 0x01
    23ca:	69 2f       	mov	r22, r25
    23cc:	41 e0       	ldi	r20, 0x01	; 1
    23ce:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <DIO_voidSetPinDirection>
	switch(Copy_pstructLed -> ActiveState)
    23d2:	e9 81       	ldd	r30, Y+1	; 0x01
    23d4:	fa 81       	ldd	r31, Y+2	; 0x02
    23d6:	82 81       	ldd	r24, Z+2	; 0x02
    23d8:	28 2f       	mov	r18, r24
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	3c 83       	std	Y+4, r19	; 0x04
    23de:	2b 83       	std	Y+3, r18	; 0x03
    23e0:	8b 81       	ldd	r24, Y+3	; 0x03
    23e2:	9c 81       	ldd	r25, Y+4	; 0x04
    23e4:	00 97       	sbiw	r24, 0x00	; 0
    23e6:	81 f0       	breq	.+32     	; 0x2408 <LED_voidInit+0x5a>
    23e8:	2b 81       	ldd	r18, Y+3	; 0x03
    23ea:	3c 81       	ldd	r19, Y+4	; 0x04
    23ec:	21 30       	cpi	r18, 0x01	; 1
    23ee:	31 05       	cpc	r19, r1
    23f0:	a9 f4       	brne	.+42     	; 0x241c <LED_voidInit+0x6e>
	{
	case LED_ACTIVE_HIGH :
		DIO_voidSetPinValue(Copy_pstructLed->Port , Copy_pstructLed->Pin , DIO_LOW);
    23f2:	e9 81       	ldd	r30, Y+1	; 0x01
    23f4:	fa 81       	ldd	r31, Y+2	; 0x02
    23f6:	80 81       	ld	r24, Z
    23f8:	e9 81       	ldd	r30, Y+1	; 0x01
    23fa:	fa 81       	ldd	r31, Y+2	; 0x02
    23fc:	91 81       	ldd	r25, Z+1	; 0x01
    23fe:	69 2f       	mov	r22, r25
    2400:	40 e0       	ldi	r20, 0x00	; 0
    2402:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_voidSetPinValue>
    2406:	0a c0       	rjmp	.+20     	; 0x241c <LED_voidInit+0x6e>
		break;
	case LED_ACTIVE_LOW :
		DIO_voidSetPinValue(Copy_pstructLed->Port , Copy_pstructLed->Pin , DIO_HIGH);
    2408:	e9 81       	ldd	r30, Y+1	; 0x01
    240a:	fa 81       	ldd	r31, Y+2	; 0x02
    240c:	80 81       	ld	r24, Z
    240e:	e9 81       	ldd	r30, Y+1	; 0x01
    2410:	fa 81       	ldd	r31, Y+2	; 0x02
    2412:	91 81       	ldd	r25, Z+1	; 0x01
    2414:	69 2f       	mov	r22, r25
    2416:	41 e0       	ldi	r20, 0x01	; 1
    2418:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_voidSetPinValue>
		break;
	default:
		break;
	}
}
    241c:	0f 90       	pop	r0
    241e:	0f 90       	pop	r0
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	cf 91       	pop	r28
    2426:	df 91       	pop	r29
    2428:	08 95       	ret

0000242a <LED_voidOn>:
void LED_voidOn			(LED_t * Copy_pstructLed )
{
    242a:	df 93       	push	r29
    242c:	cf 93       	push	r28
    242e:	00 d0       	rcall	.+0      	; 0x2430 <LED_voidOn+0x6>
    2430:	00 d0       	rcall	.+0      	; 0x2432 <LED_voidOn+0x8>
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
    2436:	9a 83       	std	Y+2, r25	; 0x02
    2438:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_pstructLed -> ActiveState)
    243a:	e9 81       	ldd	r30, Y+1	; 0x01
    243c:	fa 81       	ldd	r31, Y+2	; 0x02
    243e:	82 81       	ldd	r24, Z+2	; 0x02
    2440:	28 2f       	mov	r18, r24
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	3c 83       	std	Y+4, r19	; 0x04
    2446:	2b 83       	std	Y+3, r18	; 0x03
    2448:	8b 81       	ldd	r24, Y+3	; 0x03
    244a:	9c 81       	ldd	r25, Y+4	; 0x04
    244c:	00 97       	sbiw	r24, 0x00	; 0
    244e:	81 f0       	breq	.+32     	; 0x2470 <LED_voidOn+0x46>
    2450:	2b 81       	ldd	r18, Y+3	; 0x03
    2452:	3c 81       	ldd	r19, Y+4	; 0x04
    2454:	21 30       	cpi	r18, 0x01	; 1
    2456:	31 05       	cpc	r19, r1
    2458:	a9 f4       	brne	.+42     	; 0x2484 <LED_voidOn+0x5a>
		{
		case LED_ACTIVE_HIGH :
			DIO_voidSetPinValue(Copy_pstructLed->Port , Copy_pstructLed->Pin , DIO_HIGH);
    245a:	e9 81       	ldd	r30, Y+1	; 0x01
    245c:	fa 81       	ldd	r31, Y+2	; 0x02
    245e:	80 81       	ld	r24, Z
    2460:	e9 81       	ldd	r30, Y+1	; 0x01
    2462:	fa 81       	ldd	r31, Y+2	; 0x02
    2464:	91 81       	ldd	r25, Z+1	; 0x01
    2466:	69 2f       	mov	r22, r25
    2468:	41 e0       	ldi	r20, 0x01	; 1
    246a:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_voidSetPinValue>
    246e:	0a c0       	rjmp	.+20     	; 0x2484 <LED_voidOn+0x5a>
			break;
		case LED_ACTIVE_LOW :
			DIO_voidSetPinValue(Copy_pstructLed->Port , Copy_pstructLed->Pin , DIO_LOW);
    2470:	e9 81       	ldd	r30, Y+1	; 0x01
    2472:	fa 81       	ldd	r31, Y+2	; 0x02
    2474:	80 81       	ld	r24, Z
    2476:	e9 81       	ldd	r30, Y+1	; 0x01
    2478:	fa 81       	ldd	r31, Y+2	; 0x02
    247a:	91 81       	ldd	r25, Z+1	; 0x01
    247c:	69 2f       	mov	r22, r25
    247e:	40 e0       	ldi	r20, 0x00	; 0
    2480:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_voidSetPinValue>
			break;
		default:
			break;
		}
}
    2484:	0f 90       	pop	r0
    2486:	0f 90       	pop	r0
    2488:	0f 90       	pop	r0
    248a:	0f 90       	pop	r0
    248c:	cf 91       	pop	r28
    248e:	df 91       	pop	r29
    2490:	08 95       	ret

00002492 <LED_voidOff>:
void LED_voidOff		(LED_t * Copy_pstructLed )
{
    2492:	df 93       	push	r29
    2494:	cf 93       	push	r28
    2496:	00 d0       	rcall	.+0      	; 0x2498 <LED_voidOff+0x6>
    2498:	00 d0       	rcall	.+0      	; 0x249a <LED_voidOff+0x8>
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	9a 83       	std	Y+2, r25	; 0x02
    24a0:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_pstructLed -> ActiveState)
    24a2:	e9 81       	ldd	r30, Y+1	; 0x01
    24a4:	fa 81       	ldd	r31, Y+2	; 0x02
    24a6:	82 81       	ldd	r24, Z+2	; 0x02
    24a8:	28 2f       	mov	r18, r24
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	3c 83       	std	Y+4, r19	; 0x04
    24ae:	2b 83       	std	Y+3, r18	; 0x03
    24b0:	8b 81       	ldd	r24, Y+3	; 0x03
    24b2:	9c 81       	ldd	r25, Y+4	; 0x04
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	81 f0       	breq	.+32     	; 0x24d8 <LED_voidOff+0x46>
    24b8:	2b 81       	ldd	r18, Y+3	; 0x03
    24ba:	3c 81       	ldd	r19, Y+4	; 0x04
    24bc:	21 30       	cpi	r18, 0x01	; 1
    24be:	31 05       	cpc	r19, r1
    24c0:	a9 f4       	brne	.+42     	; 0x24ec <LED_voidOff+0x5a>
		{
		case LED_ACTIVE_HIGH :
			DIO_voidSetPinValue(Copy_pstructLed->Port , Copy_pstructLed->Pin , DIO_LOW);
    24c2:	e9 81       	ldd	r30, Y+1	; 0x01
    24c4:	fa 81       	ldd	r31, Y+2	; 0x02
    24c6:	80 81       	ld	r24, Z
    24c8:	e9 81       	ldd	r30, Y+1	; 0x01
    24ca:	fa 81       	ldd	r31, Y+2	; 0x02
    24cc:	91 81       	ldd	r25, Z+1	; 0x01
    24ce:	69 2f       	mov	r22, r25
    24d0:	40 e0       	ldi	r20, 0x00	; 0
    24d2:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_voidSetPinValue>
    24d6:	0a c0       	rjmp	.+20     	; 0x24ec <LED_voidOff+0x5a>
			break;
		case LED_ACTIVE_LOW :
			DIO_voidSetPinValue(Copy_pstructLed->Port , Copy_pstructLed->Pin , DIO_HIGH);
    24d8:	e9 81       	ldd	r30, Y+1	; 0x01
    24da:	fa 81       	ldd	r31, Y+2	; 0x02
    24dc:	80 81       	ld	r24, Z
    24de:	e9 81       	ldd	r30, Y+1	; 0x01
    24e0:	fa 81       	ldd	r31, Y+2	; 0x02
    24e2:	91 81       	ldd	r25, Z+1	; 0x01
    24e4:	69 2f       	mov	r22, r25
    24e6:	41 e0       	ldi	r20, 0x01	; 1
    24e8:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_voidSetPinValue>
			break;
		default:
			break;
		}
}
    24ec:	0f 90       	pop	r0
    24ee:	0f 90       	pop	r0
    24f0:	0f 90       	pop	r0
    24f2:	0f 90       	pop	r0
    24f4:	cf 91       	pop	r28
    24f6:	df 91       	pop	r29
    24f8:	08 95       	ret

000024fa <main>:
                  {DIO_PORTA , DIO_PIN6 , LED_ACTIVE_HIGH},
                  {DIO_PORTA , DIO_PIN7 , LED_ACTIVE_HIGH}};
 /*******************************************************************/

int main(void)
{
    24fa:	df 93       	push	r29
    24fc:	cf 93       	push	r28
    24fe:	00 d0       	rcall	.+0      	; 0x2500 <main+0x6>
    2500:	00 d0       	rcall	.+0      	; 0x2502 <main+0x8>
    2502:	00 d0       	rcall	.+0      	; 0x2504 <main+0xa>
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
//initialize traffic leds
for(s8 i = 0 ; i < 8 ; i++)
    2508:	1b 82       	std	Y+3, r1	; 0x03
    250a:	11 c0       	rjmp	.+34     	; 0x252e <main+0x34>
{
	LED_voidInit(&Leds[i]);
    250c:	8b 81       	ldd	r24, Y+3	; 0x03
    250e:	28 2f       	mov	r18, r24
    2510:	33 27       	eor	r19, r19
    2512:	27 fd       	sbrc	r18, 7
    2514:	30 95       	com	r19
    2516:	c9 01       	movw	r24, r18
    2518:	88 0f       	add	r24, r24
    251a:	99 1f       	adc	r25, r25
    251c:	82 0f       	add	r24, r18
    251e:	93 1f       	adc	r25, r19
    2520:	88 59       	subi	r24, 0x98	; 152
    2522:	9f 4f       	sbci	r25, 0xFF	; 255
    2524:	0e 94 d7 11 	call	0x23ae	; 0x23ae <LED_voidInit>
 /*******************************************************************/

int main(void)
{
//initialize traffic leds
for(s8 i = 0 ; i < 8 ; i++)
    2528:	8b 81       	ldd	r24, Y+3	; 0x03
    252a:	8f 5f       	subi	r24, 0xFF	; 255
    252c:	8b 83       	std	Y+3, r24	; 0x03
    252e:	8b 81       	ldd	r24, Y+3	; 0x03
    2530:	88 30       	cpi	r24, 0x08	; 8
    2532:	64 f3       	brlt	.-40     	; 0x250c <main+0x12>
{
	LED_voidInit(&Leds[i]);

}

DIO_voidSetPortDirection(DIO_PORTB , DIO_INPUT);
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	60 e0       	ldi	r22, 0x00	; 0
    2538:	0e 94 71 10 	call	0x20e2	; 0x20e2 <DIO_voidSetPortDirection>
DIO_voidSetPortValue(DIO_PORTB , 0xff);
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	6f ef       	ldi	r22, 0xFF	; 255
    2540:	0e 94 30 10 	call	0x2060	; 0x2060 <DIO_voidSetPortValue>
s8 switch_value = -1;
    2544:	8f ef       	ldi	r24, 0xFF	; 255
    2546:	8c 83       	std	Y+4, r24	; 0x04
while(1)
{

    for(s8 i = sw1 ; i < (sw8 + 1) ; i++)
    2548:	1a 82       	std	Y+2, r1	; 0x02
    254a:	0f c0       	rjmp	.+30     	; 0x256a <main+0x70>
    {
    	if(DIO_u8GetPinValue(DIO_PORTB , i) == 0)
    254c:	9a 81       	ldd	r25, Y+2	; 0x02
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	69 2f       	mov	r22, r25
    2552:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <DIO_u8GetPinValue>
    2556:	88 23       	and	r24, r24
    2558:	19 f4       	brne	.+6      	; 0x2560 <main+0x66>
    	{
    		switch_value = i;
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	8c 83       	std	Y+4, r24	; 0x04
    255e:	08 c0       	rjmp	.+16     	; 0x2570 <main+0x76>
    		break;
    	}
    	else
    	{
    		 switch_value = -1;
    2560:	8f ef       	ldi	r24, 0xFF	; 255
    2562:	8c 83       	std	Y+4, r24	; 0x04
DIO_voidSetPortValue(DIO_PORTB , 0xff);
s8 switch_value = -1;
while(1)
{

    for(s8 i = sw1 ; i < (sw8 + 1) ; i++)
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	8f 5f       	subi	r24, 0xFF	; 255
    2568:	8a 83       	std	Y+2, r24	; 0x02
    256a:	8a 81       	ldd	r24, Y+2	; 0x02
    256c:	88 30       	cpi	r24, 0x08	; 8
    256e:	74 f3       	brlt	.-36     	; 0x254c <main+0x52>
    		 switch_value = -1;
    	}

    }

    switch(switch_value)
    2570:	8c 81       	ldd	r24, Y+4	; 0x04
    2572:	28 2f       	mov	r18, r24
    2574:	33 27       	eor	r19, r19
    2576:	27 fd       	sbrc	r18, 7
    2578:	30 95       	com	r19
    257a:	3e 83       	std	Y+6, r19	; 0x06
    257c:	2d 83       	std	Y+5, r18	; 0x05
    257e:	8d 81       	ldd	r24, Y+5	; 0x05
    2580:	9e 81       	ldd	r25, Y+6	; 0x06
    2582:	83 30       	cpi	r24, 0x03	; 3
    2584:	91 05       	cpc	r25, r1
    2586:	c1 f1       	breq	.+112    	; 0x25f8 <main+0xfe>
    2588:	2d 81       	ldd	r18, Y+5	; 0x05
    258a:	3e 81       	ldd	r19, Y+6	; 0x06
    258c:	24 30       	cpi	r18, 0x04	; 4
    258e:	31 05       	cpc	r19, r1
    2590:	7c f4       	brge	.+30     	; 0x25b0 <main+0xb6>
    2592:	8d 81       	ldd	r24, Y+5	; 0x05
    2594:	9e 81       	ldd	r25, Y+6	; 0x06
    2596:	81 30       	cpi	r24, 0x01	; 1
    2598:	91 05       	cpc	r25, r1
    259a:	21 f1       	breq	.+72     	; 0x25e4 <main+0xea>
    259c:	2d 81       	ldd	r18, Y+5	; 0x05
    259e:	3e 81       	ldd	r19, Y+6	; 0x06
    25a0:	22 30       	cpi	r18, 0x02	; 2
    25a2:	31 05       	cpc	r19, r1
    25a4:	24 f5       	brge	.+72     	; 0x25ee <main+0xf4>
    25a6:	8d 81       	ldd	r24, Y+5	; 0x05
    25a8:	9e 81       	ldd	r25, Y+6	; 0x06
    25aa:	00 97       	sbiw	r24, 0x00	; 0
    25ac:	b1 f0       	breq	.+44     	; 0x25da <main+0xe0>
    25ae:	3d c0       	rjmp	.+122    	; 0x262a <main+0x130>
    25b0:	2d 81       	ldd	r18, Y+5	; 0x05
    25b2:	3e 81       	ldd	r19, Y+6	; 0x06
    25b4:	25 30       	cpi	r18, 0x05	; 5
    25b6:	31 05       	cpc	r19, r1
    25b8:	49 f1       	breq	.+82     	; 0x260c <main+0x112>
    25ba:	8d 81       	ldd	r24, Y+5	; 0x05
    25bc:	9e 81       	ldd	r25, Y+6	; 0x06
    25be:	85 30       	cpi	r24, 0x05	; 5
    25c0:	91 05       	cpc	r25, r1
    25c2:	fc f0       	brlt	.+62     	; 0x2602 <main+0x108>
    25c4:	2d 81       	ldd	r18, Y+5	; 0x05
    25c6:	3e 81       	ldd	r19, Y+6	; 0x06
    25c8:	26 30       	cpi	r18, 0x06	; 6
    25ca:	31 05       	cpc	r19, r1
    25cc:	21 f1       	breq	.+72     	; 0x2616 <main+0x11c>
    25ce:	8d 81       	ldd	r24, Y+5	; 0x05
    25d0:	9e 81       	ldd	r25, Y+6	; 0x06
    25d2:	87 30       	cpi	r24, 0x07	; 7
    25d4:	91 05       	cpc	r25, r1
    25d6:	21 f1       	breq	.+72     	; 0x2620 <main+0x126>
    25d8:	28 c0       	rjmp	.+80     	; 0x262a <main+0x130>
    {
    case sw1 :
    	Flasing_Voidevey_500ms(Leds);
    25da:	88 e6       	ldi	r24, 0x68	; 104
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	0e 94 9b 05 	call	0xb36	; 0xb36 <Flasing_Voidevey_500ms>
    25e2:	b2 cf       	rjmp	.-156    	; 0x2548 <main+0x4e>
	break;
    case sw2 :
    	Shifting_VoidLeft_Every_250ms(Leds);
    25e4:	88 e6       	ldi	r24, 0x68	; 104
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	0e 94 c4 06 	call	0xd88	; 0xd88 <Shifting_VoidLeft_Every_250ms>
    25ec:	ad cf       	rjmp	.-166    	; 0x2548 <main+0x4e>
  	break;
    case sw3 :
    	Shifting_VoidRight_Every_250ms(Leds);
    25ee:	88 e6       	ldi	r24, 0x68	; 104
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	0e 94 74 07 	call	0xee8	; 0xee8 <Shifting_VoidRight_Every_250ms>
    25f6:	a8 cf       	rjmp	.-176    	; 0x2548 <main+0x4e>
  	break;
    case  sw4 :
    	Leds_VoidConverging_Every_300ms(Leds);
    25f8:	88 e6       	ldi	r24, 0x68	; 104
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	0e 94 25 08 	call	0x104a	; 0x104a <Leds_VoidConverging_Every_300ms>
    2600:	a3 cf       	rjmp	.-186    	; 0x2548 <main+0x4e>
  	break;
    case sw5 :
    	Leds_VoidDiverging_Every_300ms(Leds);
    2602:	88 e6       	ldi	r24, 0x68	; 104
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	0e 94 0a 09 	call	0x1214	; 0x1214 <Leds_VoidDiverging_Every_300ms>
    260a:	9e cf       	rjmp	.-196    	; 0x2548 <main+0x4e>
  	break;
    case sw6 :
    	Leds_VoidPingPong_Every_250ms(Leds);
    260c:	88 e6       	ldi	r24, 0x68	; 104
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	0e 94 ee 09 	call	0x13dc	; 0x13dc <Leds_VoidPingPong_Every_250ms>
    2614:	99 cf       	rjmp	.-206    	; 0x2548 <main+0x4e>
  	break;
    case sw7 :
    	Leds_VoidSnakeEffect_Every_300ms(Leds);
    2616:	88 e6       	ldi	r24, 0x68	; 104
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <Leds_VoidSnakeEffect_Every_300ms>
    261e:	94 cf       	rjmp	.-216    	; 0x2548 <main+0x4e>
  	break;
    case sw8:
    	Leds_VoidConverging_And_Diverging_Every_300ms(Leds);
    2620:	88 e6       	ldi	r24, 0x68	; 104
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <Leds_VoidConverging_And_Diverging_Every_300ms>
    2628:	8f cf       	rjmp	.-226    	; 0x2548 <main+0x4e>
     break;
    default:
    	for(s8 i = 0 ; i < 8 ; i++)
    262a:	19 82       	std	Y+1, r1	; 0x01
    262c:	11 c0       	rjmp	.+34     	; 0x2650 <main+0x156>
		{
			LED_voidOff(&Leds[i]);
    262e:	89 81       	ldd	r24, Y+1	; 0x01
    2630:	28 2f       	mov	r18, r24
    2632:	33 27       	eor	r19, r19
    2634:	27 fd       	sbrc	r18, 7
    2636:	30 95       	com	r19
    2638:	c9 01       	movw	r24, r18
    263a:	88 0f       	add	r24, r24
    263c:	99 1f       	adc	r25, r25
    263e:	82 0f       	add	r24, r18
    2640:	93 1f       	adc	r25, r19
    2642:	88 59       	subi	r24, 0x98	; 152
    2644:	9f 4f       	sbci	r25, 0xFF	; 255
    2646:	0e 94 49 12 	call	0x2492	; 0x2492 <LED_voidOff>
  	break;
    case sw8:
    	Leds_VoidConverging_And_Diverging_Every_300ms(Leds);
     break;
    default:
    	for(s8 i = 0 ; i < 8 ; i++)
    264a:	89 81       	ldd	r24, Y+1	; 0x01
    264c:	8f 5f       	subi	r24, 0xFF	; 255
    264e:	89 83       	std	Y+1, r24	; 0x01
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	88 30       	cpi	r24, 0x08	; 8
    2654:	64 f3       	brlt	.-40     	; 0x262e <main+0x134>
    2656:	78 cf       	rjmp	.-272    	; 0x2548 <main+0x4e>

00002658 <__prologue_saves__>:
    2658:	2f 92       	push	r2
    265a:	3f 92       	push	r3
    265c:	4f 92       	push	r4
    265e:	5f 92       	push	r5
    2660:	6f 92       	push	r6
    2662:	7f 92       	push	r7
    2664:	8f 92       	push	r8
    2666:	9f 92       	push	r9
    2668:	af 92       	push	r10
    266a:	bf 92       	push	r11
    266c:	cf 92       	push	r12
    266e:	df 92       	push	r13
    2670:	ef 92       	push	r14
    2672:	ff 92       	push	r15
    2674:	0f 93       	push	r16
    2676:	1f 93       	push	r17
    2678:	cf 93       	push	r28
    267a:	df 93       	push	r29
    267c:	cd b7       	in	r28, 0x3d	; 61
    267e:	de b7       	in	r29, 0x3e	; 62
    2680:	ca 1b       	sub	r28, r26
    2682:	db 0b       	sbc	r29, r27
    2684:	0f b6       	in	r0, 0x3f	; 63
    2686:	f8 94       	cli
    2688:	de bf       	out	0x3e, r29	; 62
    268a:	0f be       	out	0x3f, r0	; 63
    268c:	cd bf       	out	0x3d, r28	; 61
    268e:	09 94       	ijmp

00002690 <__epilogue_restores__>:
    2690:	2a 88       	ldd	r2, Y+18	; 0x12
    2692:	39 88       	ldd	r3, Y+17	; 0x11
    2694:	48 88       	ldd	r4, Y+16	; 0x10
    2696:	5f 84       	ldd	r5, Y+15	; 0x0f
    2698:	6e 84       	ldd	r6, Y+14	; 0x0e
    269a:	7d 84       	ldd	r7, Y+13	; 0x0d
    269c:	8c 84       	ldd	r8, Y+12	; 0x0c
    269e:	9b 84       	ldd	r9, Y+11	; 0x0b
    26a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    26a2:	b9 84       	ldd	r11, Y+9	; 0x09
    26a4:	c8 84       	ldd	r12, Y+8	; 0x08
    26a6:	df 80       	ldd	r13, Y+7	; 0x07
    26a8:	ee 80       	ldd	r14, Y+6	; 0x06
    26aa:	fd 80       	ldd	r15, Y+5	; 0x05
    26ac:	0c 81       	ldd	r16, Y+4	; 0x04
    26ae:	1b 81       	ldd	r17, Y+3	; 0x03
    26b0:	aa 81       	ldd	r26, Y+2	; 0x02
    26b2:	b9 81       	ldd	r27, Y+1	; 0x01
    26b4:	ce 0f       	add	r28, r30
    26b6:	d1 1d       	adc	r29, r1
    26b8:	0f b6       	in	r0, 0x3f	; 63
    26ba:	f8 94       	cli
    26bc:	de bf       	out	0x3e, r29	; 62
    26be:	0f be       	out	0x3f, r0	; 63
    26c0:	cd bf       	out	0x3d, r28	; 61
    26c2:	ed 01       	movw	r28, r26
    26c4:	08 95       	ret

000026c6 <_exit>:
    26c6:	f8 94       	cli

000026c8 <__stop_program>:
    26c8:	ff cf       	rjmp	.-2      	; 0x26c8 <__stop_program>
